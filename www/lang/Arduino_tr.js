'use strict';
goog.provide ( 'Blockly.Msg.fr');
goog.require ( 'Blockly.Msg');
// Electron window
Blockly.Msg.com1 = "‚ö†Ô∏è USB baƒülantƒ± noktasƒ±nƒ± se√ßin";
Blockly.Msg.com2 = "‚ö†Ô∏è L√ºtfen USB'yi se√ßin" ;
Blockly.Msg.check = "Kontrol...";
Blockly.Msg.upload = "Y√ºkleme...";
Blockly.Msg.error = "üõë HATA: Baƒülƒ± olmayan bloklar";
Blockly.Msg.verif = "‚õî √ñnce kodu kontrol edin "
Blockly.Msg.save = "Bi√ßim olarak kaydet";
Blockly.Msg.update = "G√ºncelleme";
Blockly.Msg.new_update = "Yeni bir s√ºr√ºm mevcut, ≈üimdi indirmek ve y√ºklemek ister misiniz?" ;
Blockly.Msg.yes = "Evet";
Blockly.Msg.no = "Hayƒ±r";
Blockly.Msg.uptodate = "‚úÖ S√ºr√ºm g√ºncel!" ;
Blockly.Msg.download = "ƒ∞ndirme tamamlandƒ±, uygulama y√ºklenecek ve yeniden ba≈ülatƒ±lacak..."
// common to all blocks
Blockly.Msg.HELPURL = "https://ottodiy.com"; // do not translate
Blockly.Msg.pin = "Pinde";
Blockly.Msg._AT = "'de";
Blockly.Msg.AV = "ileri";
Blockly.Msg.AR = "geri";
Blockly.Msg.high = "HIGH"; // do not translate
Blockly.Msg.low = "LOW"; // do not translate
Blockly.Msg.right = "saƒü";
Blockly.Msg.left = "sol";
Blockly.Msg.LetR = "saƒü & sol";
Blockly.Msg.direction = "y√∂n";
Blockly.Msg.vitesse = "hƒ±z ";
Blockly.Msg.values = "[0-90]";
Blockly.Msg.Name = "Name";
// categories (menu)
Blockly.Msg.CAT_STOCKAGE = "‚äû Depolama";
Blockly.Msg.CAT_numerique = "- Dijital";
Blockly.Msg.CAT_analogique = "~ Analog";
Blockly.Msg.CAT_wifi = "Ôº† Wifi";
Blockly.Msg.CAT_TAB = "‚ñ¶ Arrays";
Blockly.Msg.CAT_list = "‚ñ§ Liste";
Blockly.Msg.CAT_servo = "‚Ü∑ Servo";
Blockly.Msg.CAT_del = "‚òÑ LED";
Blockly.Msg.CAT_LOGIC = "‚áã Mantƒ±k";
Blockly.Msg.CAT_MATH = "‚àë Matematik";
Blockly.Msg.CAT_TEXT = "‚ùù Metin";
Blockly.Msg.CAT_VARIABLES = "‚Üù Deƒüi≈üken";
Blockly.Msg.CAT_FUNCTIONS = "‚à¨ Fonksiyon";
Blockly.Msg.CAT_ARDUINO = "‚àû Yapƒ±";
Blockly.Msg.CAT_ARDUINO_IN = "‚áÖ Giri≈ü/√áƒ±kƒ±≈ü";
Blockly.Msg.CAT_ARDUINO_OUT = "‚ò∫ √áƒ±kƒ±≈ü";
Blockly.Msg.CAT_ARDUINO_TIME = "‚è± Zaman";
Blockly.Msg.CAT_actionneur = "‚Üª Motor";
Blockly.Msg.CAT_com = "‚òé ƒ∞leti≈üim";
Blockly.Msg.CAT_ARDUINO_COMM_SERIAL = "- Seri Port";
Blockly.Msg.CAT_ARDUINO_COMM_SOFTSERIAL = "- Yazƒ±lƒ±m";
Blockly.Msg.CAT_ARDUINO_moteur="‚Üª DC Motor";
Blockly.Msg.CAT_ultrason = "‚á£ Sens√∂r";
Blockly.Msg.CAT_bluetooth = "‚òè Bluetooth";
Blockly.Msg.CAT_ARDUINO_matrice8x8 = "‚ñë LED Aƒüƒ±z";
Blockly.Msg.CAT_ARDUINO_matrice16x8 = "‚ñë LED G√∂zler";
Blockly.Msg.CAT_DFRobot_SHIELD_LCDKEYPAD = "‚ñÄ LCD Ekran";
Blockly.Msg.CAT_iot = "‚òÅ IoT";
Blockly.Msg.CAT_html = "‚úâ HTML";
Blockly.Msg.CAT_DFPLAYER = "‚ô´ Ses";
Blockly.Msg.CAT_OTTO = "ü§ñ Otto";
Blockly.Msg.CAT_ESCORNABOT="üêû Escornabot";
Blockly.Msg.CAT_TEMP = "üå°Ô∏è Temperature"
Blockly.Msg.CAT_LIGHT = "üåû Light"
Blockly.Msg.CAT_WATER = "üíß Water"
Blockly.Msg.CAT_SOUND ="üé§ Noise"
Blockly.Msg.CAT_GAS = "‚õΩ Gas"
Blockly.Msg.CAT_OLED_U8G = "‚ñÄ OLED";
Blockly.Msg.CAT_NEOPIXEL = "‚òÑ Neopixel";
Blockly.Msg.CAT_NEOMATRIX = "üåà NeoMatrix";
Blockly.Msg.CAT_CCS811 = "Sensor CO2";
Blockly.Msg.CAT_Displays = "üñ• Displays";
Blockly.Msg.CAT_AUDIO = "‚ô´ Audio";
Blockly.Msg.CAT_CAMERAS = "üì∑ Cameras";
Blockly.Msg.CAT_MUVISION = "MuVision";
Blockly.Msg.CAT_OTTO_DIY = "‚äü Otto DIY";
Blockly.Msg.CAT_SENSORS = "‚á£ Sensors";
Blockly.Msg.CAT_SSENSORS = "Simple Sensors";
Blockly.Msg.CAT_LED = "Led";
Blockly.Msg.CAT_LEDRGB = "RGB Led";
Blockly.Msg.CAT_MAX7219 = "Matrix MAX7219";
Blockly.Msg.CAT_MAX1640 = "Matrix TM1640";
Blockly.Msg.CAT_BARGRAPH = "BarGraph";
Blockly.Msg.CAT_LCDI2C = "LCD I2C";
Blockly.Msg.CAT_RTC_DS3231 = "RTC DS3231";
Blockly.Msg.CAT_TIME_GENERAL = "General";
Blockly.Msg.CAT_BME280 = "BME280 Preassure";
Blockly.Msg.CAT_VL53L0X = "VL53L0X Laser";
Blockly.Msg.CAT_APDS9960 = "APDS9960 Gesture";
Blockly.Msg.CAT_TFT_ST7735 = "TFT ST7735";
Blockly.Msg.CAT_TCS34725="Color TCS34725";
Blockly.Msg.CAT_RADIO_TEA5767="Radio TEA5767";
Blockly.Msg.CAT_HMC5883="Compass HMC5883";
Blockly.Msg.CAT_RFID="RFID MFRC522";
Blockly.Msg.CAT_KEYBOARD="Keyboard & Mouse";
Blockly.Msg.CAT_GPS="GPS NEO6";
Blockly.Msg.CAT_MQTT = "üåê MQTT";
Blockly.Msg.CAT_IFTTT = "üåê IFTTT";
Blockly.Msg.CAT_NTP = "üåê NTP";
Blockly.Msg.CAT_THINGSPEAK = "üåê Thingspeak";
Blockly.Msg.CAT_TELEGRAM = "üåê Telegram";
Blockly.Msg.CAT_OPENWEATHER="üåê OpenWeather";
Blockly.Msg.CAT_WIFISERVER="üåê WiFi server";
Blockly.Msg.CAT_TM1637="üí° DIGITS";
Blockly.Msg.CAT_FIREBASE = "üåê Firebase";
Blockly.Msg.CAT_ESPNOW = "üåê EspNow";
Blockly.Msg.CAT_ALEXA = "üåê Alexa";
Blockly.Msg.CAT_RTC_INTERNAL = "‚è≤Ô∏è Internal Clock";

//DISPALY 7 SEGMENT TM1637
Blockly.Msg.TM1637_name = "TM1637 Display 7 segment.";
Blockly.Msg.TM1637_init = "Init TM1637 Display 7 segment";
Blockly.Msg.TM1637_PinCLK = "Pin CLK";
Blockly.Msg.TM1637_PinDIO = "Pin DIO";
Blockly.Msg.M1637_Brightness = "Set brightness(0-7)";
Blockly.Msg.M1637_turnOFF_ON = "Turn";
Blockly.Msg.M1637_Clear = "Clear";
Blockly.Msg.M1637_number="Set number";
Blockly.Msg.M1637_Digit = "Position(0-3)";
Blockly.Msg.M1637_Length = "Number of digits to set";
Blockly.Msg.M1637_fill = "Leading zeros";
Blockly.Msg.M1637_digitsegment="Set segment array digit(0-3)";
Blockly.Msg.M1637_value="Value";
Blockly.Msg.M1637_arraysegment="Display segment array.";
Blockly.Msg.M1637_points = "Points";


//RTC DS3231
Blockly.Msg.RTCDS3231_NAME="Init RTC DS3231.I2C pins";
Blockly.Msg.RTCDS3231_RTC="Set DateTime DS3231";
Blockly.Msg.RTCDS3231_DAY="Day";
Blockly.Msg.RTCDS3231_MONTH="Month";
Blockly.Msg.RTCDS3231_YEAR="Year";
Blockly.Msg.RTCDS3231_HOUR="Hour";
Blockly.Msg.RTCDS3231_MINUTE="Minute";
Blockly.Msg.RTCDS3231_SECOND="Second";
Blockly.Msg.RTCDS3231_DOFWEEK="Day of week";
Blockly.Msg.RTCDS3231_READ_RTC="RTC DS3231.Read the date and time";
Blockly.Msg.RTCDS3231_VALUES="value";
Blockly.Msg.RTCDS3231_Name2="RTC DS3231.";
Blockly.Msg.RTCDS3231_TEXT_DOFWEEK="Day of week in string";
Blockly.Msg.RTCDS3231_TEXT_MONTH="Month in string ";

//INTERNAL RTC ESP32
Blockly.Msg.INTERNALRTC_NAME="Internal RTC";
Blockly.Msg.INTERNALRTC_RTC="‚è≤Ô∏è Set Date & Time ";
Blockly.Msg.INTERNALRTC_DAY="Day";
Blockly.Msg.INTERNALRTC_MONTH="Month";
Blockly.Msg.INTERNALRTC_YEAR="Year";
Blockly.Msg.INTERNALRTC_HOUR="Hour";
Blockly.Msg.INTERNALRTC_MINUTE="Minute";
Blockly.Msg.INTERNALRTC_SECOND="Second";
Blockly.Msg.INTERNALRTC_DOFWEEK="Day of week";
Blockly.Msg.INTERNALRTC_VALUES="value";
Blockly.Msg.INTERNALRTC_Name2="‚è≤Ô∏è RTC.";
Blockly.Msg.INTERNALRTC_GETTIME="Get Time";
Blockly.Msg.INTERNALRTC_GETDATE="Get Date";

//Wireless
Blockly.Msg.esp8266_init_tooltip = "wifi mod√ºl√ºn√ºn ba≈ülatƒ±lmasƒ± ve belirtilen parametrelerle baƒülantƒ±";
Blockly.Msg.esp8266_1 = "Esp 8266";
Blockly.Msg.esp8266_2 = "SSID";
Blockly.Msg.esp8266_3 = "Anahtar";
Blockly.Msg.esp8266_4 = "IP";
Blockly.Msg.esp8266_5 = "Ge√ßit";
Blockly.Msg.esp8266_6 = "maskeleme";
Blockly.Msg.esp8266_7 = [["alƒ±cƒ±", "alƒ±cƒ±"], ["sunucu", "sunucu"]];
Blockly.Msg.esp8266_8 = "port";
Blockly.Msg.esp8266_9 = [["dinamik", "dinamik"], ["statik", "statik"]];
Blockly.Msg.esp8266_10 = "adres";
Blockly.Msg.esp8266_recept_tooltip = "kar≈üƒ±lama";
Blockly.Msg.esp8266_url = "https://github.com/OttoDIY/esp";
Blockly.Msg.esp8266_html_tooltip = "";
Blockly.Msg.esp8266_send_html_tooltip = "";
Blockly.Msg.esp8266_send_html = "HTML sayfasƒ± g√∂nder";
Blockly.Msg.esp8266_start_tooltip = "";
Blockly.Msg.esp8266_start = "Sunucuyu ba≈ülat";
Blockly.Msg.esp8266_request_tooltip = "";
Blockly.Msg.esp8266_request = "sorguda bulursak";
Blockly.Msg.esp8266_request_container = "bulduk";
Blockly.Msg.esp8266_html_webpage = "Name of the HTML page:";
//INTERRUPTION
Blockly.Msg.LKL_ATTACHINTERRUPT_PIN = 'Kesme: bir';
Blockly.Msg.LKL_DETACHINTERRUPT_PIN = "Pimde kesmeyi devre dƒ±≈üƒ± bƒ±rak";
Blockly.Msg.LKL_TOOLTIP_INOUT_ATTACHINTERRUPT = "Pin 2 veya 3'te harici bir kesinti (4 olasƒ± mod) meydana geldiƒüinde ger√ßekle≈ütirilecek eylemi belirtir";
Blockly.Msg.LKL_TOOLTIP_INOUT_DETACHINTERRUPT = "√ñnceden belirtilen harici kesme pimi 2 veya 3'√º devre dƒ±≈üƒ± bƒ±rakƒ±n";
Blockly.Msg.LKL_MODE = 'Pim √ºzerinde tespit edildi';
// FIELDDROPDOWN
Blockly.Msg.note = [[ "DO \u2083", "261"], [ "RE \u2083", "293"], [ "MI \u2083", "329"], [ "FA \u2083", "349"], [ "SOL \u2083", "392"], [ "LA \u2083", "440"], [ "SI \u2083", "493"], [ "DO \u2084", "523 "], [" RE \u2084 "," 587 "], [" MI \u2084 "," 659 "], [" FA \u2084 "," 698 "], [" SOL \u2084 "," 784 "], [ "LA \u2084", "880"]];
Blockly.Msg.tempo = [["\u266B", "125"], ["\u266A", "250"], ["\u2669", "500"],["ùÖóùÖ•", "1000"], ["ùÖù", "2000"]];
Blockly.Msg.on_off = [["on", "LOW"], ["off", "HIGH"]];
Blockly.Msg.menublink = [["yava≈ü√ßa", "1000"], ["hƒ±zlƒ±", "100"]];
Blockly.Msg.AV_AR = [[Blockly.Msg.AV, "FORWARD"], [Blockly.Msg.AR, "BACKWARD"]]; // do not translate
Blockly.Msg.times = [["saniye", "s"], ["milisaniye", "m"], ["mikrosaniye", "u"]];
Blockly.Msg.time = [["saniye", "s"], ["milisaniye", "m"]];
Blockly.Msg.char_lcd = [[ "# 1", "1"], [ "# 2", "2"], [ "3", "3"], [ "# 4", "4"], [ "# 5", "5"], [ "# 6", "6"], [ "No. 7", "7"], [ "# 8", "8 "]];
Blockly.Msg.rxtx = [[ "2", "2"], [ "3", "3"], [ "4", "4"], [ "5", "5"], [ "6 "," 6 "], [" 7 "," 7 "], [" 8 "," 8 "], [" 9 "," 9 "], [" 10 "," 10 "], [" 11 "," 11 "], [" 12 "," 12 "], [" 13 "," 13 "]];
Blockly.Msg.FIELDDROPDOWN = [["1(y√ºksek durum)", Blockly.Msg.high], ["0(d√º≈ü√ºk durum)", Blockly.Msg.low]];
Blockly.Msg.FIELDDROPDOWN_0_1 = [["YUKARI", Blockly.Msg.high], ["A≈ûAƒûI", Blockly.Msg.low]];
Blockly.Msg.ligne = [["1", "0"], ["2", "1"]];
Blockly.Msg.colonne = [[ "1", "0"], [ "2", "1"], [ "3", "2"], [ "4", "3"], [ "5 "," 4 "], [" 6 "," 5 "], [" 7 "," 6 "], [" 8 "," 7 "], [" 9 "," 8 "], [" 10 "," 9 "], [" 11 "," 10 "], [" 12 "," 11 "], [" 13 "," 12 "], [" 14 "," 13 "], [" 15 "," 14 "], [" 16 "," 15 "]];
Blockly.Msg.FIELDDROPDOWN_ONOFF = [["a√ß", Blockly.Msg.high], ["kapat", Blockly.Msg.low]];
Blockly.Msg.FIELDDROPDOWN_ONOFF_matrice = [["1", "doƒüru"], ["0", "yanlƒ±≈ü"]];
Blockly.Msg.FIELDDROPDOWN_av_ar = [[Blockly.Msg.AV, Blockly.Msg.high], [Blockly.Msg.AR, Blockly.Msg.low]];
Blockly.Msg.LKL_DROPDOWN = [['y√ºkselen kenar', 'RISING'], ['d√º≈üen kenar', 'FALLING'], ['deƒüi≈üen durum', 'CHANGE'], ['d√º≈ü√ºk durum', Blockly. Msg.low]];
Blockly.Msg.irq = [['y√ºkselen kenar', 'Pin.IRQ_RISING'], ['d√º≈üen kenar', 'Pin.IRQ_FALLING'], ['y√ºksek durum', 'Pin.IRQ_HIGH_LEVEL'], ["d√º≈ü√ºk durum "," Pin.IRQ_LOW_LEVEL "]];
Blockly.Msg.menudht = [["nem", "h"], ["sƒ±caklƒ±k", "t"]];
Blockly.Msg.couleur = [["mavi", "mavi"], ["sarƒ±", "sarƒ±"], ["kƒ±rmƒ±zƒ±", "kƒ±rmƒ±zƒ±"], ["ye≈üil", "ye≈üil"]];
Blockly.Msg.sens = [["ileri", "a"], ["saƒüa d√∂n", "d"], ["sola d√∂n", "g"]];
//sensor
Blockly.Msg.VL53L0X="Lazer mesafe sens√∂r√º";
Blockly.Msg.VL53L0X_tooltip="initialize sensor.\nSensor <--> Arduino\nSDA <--------> A4\nSCL <--------> A5";
Blockly.Msg.VL53L0X_distance="lazer ile √∂l√ß√ºlen mesafe";
Blockly.Msg.VL53L0X_distance_tooltip="VL530X :\nLazer ile mm cinsinden √∂l√ß√ºlen mesafe d√∂n√º≈ü√º";
Blockly.Msg.bme280="Atmospheric pressure sensor";
Blockly.Msg.bme280_tooltip="initialize sensor.\nSens√∂r <--> Arduino\nSDA <--------> A4\nSCL <--------> A5";
Blockly.Msg.bme280_pressure="atmosferik basƒ±n√ß";
Blockly.Msg.bme280_pressure_tooltip="BME280 :\nhPa cinsinden geri d√∂n√º≈ü atmosfer basƒ±ncƒ±";
Blockly.Msg.inter="anahtar";
Blockly.Msg.inter_tooltip="(true) d√∂ner anahtar belirtilen konumda deƒüilse (false) deƒüerini d√∂nd√ºr√ºr";
Blockly.Msg.mc005="pim √ºzerinde tespit edildi";
Blockly.Msg.mc005_tooltip="MC005:\n(true) d√∂ner pim √ºzerinde bir cisim algƒ±lanmazsa (false) deƒüerini d√∂nd√ºr√ºr";
Blockly.Msg.bp = "pime basƒ±lan d√ºƒüme";
Blockly.Msg.bp_tooltip = "(true) d√∂ner bir d√ºƒümeye basƒ±lmazsa (false) d√∂nd√ºr√ºr";
Blockly.Msg.dht11_tooltip="DHT11 :\nhavanƒ±n nemini verir (% 20 ila 80 arasƒ±nda) veya \n sƒ±caklƒ±ƒüƒ± ( 2 ile 50ÔøΩC arasƒ±nda)";
Blockly.Msg.dht22_tooltip = "DHT22: \nhavanƒ±n nemini verir (% 0 ila% 100 arasƒ±nda) veya \n sƒ±caklƒ±ƒüƒ± (-40 ile 80 ÔøΩ C arasƒ±nda)";
Blockly.Msg.suiveur_ligne = "pim √ºzerinde siyah √ßizgi tespit edildi";
Blockly.Msg.suiveur_ligne_tooltip = "CAP227: \nsiyah bir √ßizgi algƒ±lanƒ±rsa (true)  algƒ±lanmazsa (false) d√∂nd√ºr√ºr";
Blockly.Msg.light = "pimdeki parlaklƒ±k";
Blockly.Msg.light_tooltip = "parlaklƒ±ƒüa baƒülƒ± olarak bir deƒüer d√∂nd√ºr√ºr \n0: karanlƒ±k \n255: aydƒ±nlƒ±k";
Blockly.Msg.hum = "pim √ºzerindeki toprak nemi";
Blockly.Msg.hum_tooltip = "CAP 615: \ntoprak nemini % 0-100 arasƒ±nda verir";
Blockly.Msg.light_tooltip = "parlaklƒ±ƒüa baƒülƒ± olarak bir deƒüer d√∂nd√ºr√ºr \n0: karanlƒ±k \n255: aydƒ±nlƒ±k";
Blockly.Msg.grove_ldr = "Pimdeki parlaklƒ±k";
Blockly.Msg.grove_ldr_tooltip = "√∂l√ß√ºlen parlaklƒ±ƒüƒ± d√∂nd√ºr√ºr \n0: ƒ±≈üƒ±k yok \n100: very intense light";
Blockly.Msg.potar = "pimin imle√ß konumu";
Blockly.Msg.potar_tooltip = "imle√ß konumuna g√∂re bir deƒüer d√∂nd√ºr√ºr \n0: imle√ß solda \n255: imle√ß saƒüda";
Blockly.Msg.lm35 = "pim √ºzerindeki sƒ±caklƒ±k";
Blockly.Msg.lm35_tooltip = "LM35: \n√∂l√ß√ºlen sƒ±caklƒ±ƒüƒ± derece santigrat olarak d√∂nd√ºr√ºr (0 ile 80 ÔøΩ arasƒ±nda)";
Blockly.Msg.ultrason_1 = "mesafe < sƒ±nƒ±r";
Blockly.Msg.ultrason_2 = "√∂l√ß√ºlen mesafe sƒ±nƒ±rdan k√º√ß√ºkse Y√ºksek durumu d√∂nd√ºr√ºr";
Blockly.Msg.ultrason_distance1 = "ultrasonik sens√∂rle √∂l√ß√ºlen mesafe";
Blockly.Msg.ultrason_tooltip = "HC-SR04: \n Mesafe √∂l√ß√ºmleri yapƒ±lmasƒ±nƒ± saƒülayan ses sens√∂r√º (3 cm ile 4 m) \n TRIG ve ECHO'ya baƒülanacak Arduino'nun pinlerini g√∂sterir";
Blockly.Msg.ultrason = "Ultrasonik pinleri";
Blockly.Msg.ultrason_distance2 = "HC-SR04: \nultrasonik dedekt√∂r tarafƒ±ndan cm cinsinden √∂l√ß√ºlen mesafeyi d√∂nd√ºr√ºr";
Blockly.Msg.ultrason_helpurl = "https://wikifactory.com/+OttoDIY/otto-diy"; // do not translate
Blockly.Msg.pir = "Hareket algƒ±landƒ± ";
Blockly.Msg.feu = "Alev algƒ±landƒ± ";
Blockly.Msg.presence = "Engel tespit edildi ";
Blockly.Msg.appui = "dokunma ";
Blockly.Msg.pir_tooltip = "HC-SR501: \n Bir cisim algƒ±lanƒ±rsa (Doƒüru)  algƒ±lanmazsa (Yanlƒ±≈ü) d√∂nd√ºr√ºr";
Blockly.Msg.feu_tooltip = "CAP168: \n Bir alev algƒ±lanƒ±rsa (Doƒüru)  algƒ±lanmazsa (Yanlƒ±≈ü) d√∂nd√ºr√ºr";
Blockly.Msg.presence_tooltip = "CAP711: \n Bir baƒülantƒ± olursa (Doƒüru)  olmazsa (Yanlƒ±≈ü) d√∂nd√ºr√ºr";
Blockly.Msg.appui_tooltip = "CAP831: \n Bir destek algƒ±lanƒ±rsa (Doƒüru)  algƒ±lanmazsa (Yanlƒ±≈ü) d√∂nd√ºr√ºr";
// bluetooth
Blockly.Msg.bluetooth1 = "Bluetooth ile alƒ±nan veriler";
Blockly.Msg.bluetooth1_tooltip = "Bluetooth veri alƒ±mƒ± \n HC-06 mod√ºl√ºn√º 0 ve 1 pinlerine baƒüla \n Rx ve Tx pimleri √ßapraz";
Blockly.Msg.bluetooth2 = "Bluetooth ile g√∂nder";
Blockly.Msg.bluetooth2_tooltip = "Bluetooth ile veri g√∂nderir \n HC-06 mod√ºl√ºn√º 0 ve 1 pinlerine baƒüla \n Rx ve Tx pimleri √ßapraz";
Blockly.Msg.bluetooth_init_tooltip = "";
Blockly.Msg.bluetooth_helpurl = "https://wikifactory.com/+OttoDIY/otto-diy-plus"; // do not translate
//LCD screen
Blockly.Msg.lcd_fond = "alt";
Blockly.Msg.LCD = "LCD Ekran";
Blockly.Msg.LCDi2c_tooltip = "RGB arka ƒ±≈üƒ±klƒ± 2 satƒ±rlƒ±, 16 karakterli I2C LCD'yi ba≈ülatƒ±r. \n G√∂r√ºnt√º <-> Arduino \nSDA <--------> A4 \nSCL <- -------> A5 ";
Blockly.Msg.LCD_tooltip = "2 satƒ±r ve 16 karakterli LCD'yi ba≈ülatƒ±r ve baƒülanacak pinleri g√∂sterir";
Blockly.Msg.LCD_SHIELD_PRINT_HELPURL = "https://www.arduino.cc/en/Tutorial/Merhaba D√ºnya";
Blockly.Msg.LCD_SHIELD_PRINT_TEXT = "LCD'de g√∂ster";
Blockly.Msg.LCD_SHIELD_PRINT_TEXT_tooltip = "metni belirtilen konumda g√∂ster";
Blockly.Msg.LCD_SHIELD_PRINT_TOOLTIP = "LCD ekrana metin yazma";
Blockly.Msg.LCD_SHIELD_PRINT_INPUT1 = "Satƒ±r 1";
Blockly.Msg.LCD_SHIELD_PRINT_INPUT2 = "Satƒ±r 2";
Blockly.Msg.LCD_line = "Satƒ±r";
Blockly.Msg.LCD_col = "S√ºtun";
Blockly.Msg.LCD_raz = "LCD ekaranƒ± sil";
Blockly.Msg.LCD_raz_tooltip = "Ekranƒ± temizle";
Blockly.Msg.lcd_aff_symbole = "Sembol√º g√∂ster";
Blockly.Msg.lcd_aff_symbole_tooltip = "daha √∂nce tanƒ±mlanan sembol√º g√∂ster";
Blockly.Msg.lcd_symbole = "sembol√º tanƒ±mla";
Blockly.Msg.lcd_symbole_tooltip = "LCD i√ßin bir karakterin tanƒ±mƒ±: \n 0 pikseli kapatƒ±rl \n 1 pikseli yakar";
// structure
Blockly.Msg.loop = "‚àû D√∂ng√º";
Blockly.Msg.init = "‚öôÔ∏è Kurulum";
Blockly.Msg.base_setup_loop = "Ba≈ülatma fonksiyonu: \nDeƒüi≈ükenleri, pimlerin y√∂n√ºn√º ba≈ülatmak i√ßin kullanƒ±lƒ±r ... \nYalnƒ±zca bir kez y√ºr√ºt√ºl√ºr \nD√∂ng√º fonksiyonu: \nBu programƒ±n ana kƒ±smƒ±dƒ±r, buraya yerle≈ütirilen t√ºm bloklar d√∂ng√º i√ßinde ve s√ºresiz olarak √ßalƒ±≈üacaktƒ±r (saniyede birka√ß bin kez)";
Blockly.Msg.loop_tooltip = "Buraya yerle≈ütirilen t√ºm bloklar bir d√∂ng√º i√ßinde ve s√ºresiz olarak √ßalƒ±≈üacaktƒ±r (saniyede birka√ß bin kez)";
Blockly.Msg.begin_tooltip = "bu blok, programƒ±n y√ºr√ºt√ºlme sƒ±rasƒ±nƒ± tanƒ±mlamak i√ßin kullanƒ±lƒ±r";
Blockly.Msg.begin = "üèÅ BA≈ûLAT";
Blockly.Msg.def = "‚öôÔ∏è Bildirim";
Blockly.Msg.def_tooltip = "Buraya yerle≈ütirilen t√ºm bloklar yalnƒ±zca bir kez y√ºr√ºt√ºl√ºr, farklƒ± sens√∂rler veya akt√ºat√∂rler burada yapƒ±landƒ±rƒ±lƒ±r";
Blockly.Msg.END = "üèÅ SON";
Blockly.Msg.END_tooltip = "Programƒ± durdurun, daha sonra yerle≈ütirilen bloklar yok sayƒ±lƒ±r";
Blockly.Msg.code_tooltip = "Buraya bloklar halinde olmayan bir talimat yazƒ±n";
//matrix
Blockly.Msg.matriceLC = "LED hattƒ±nƒ± koy";
Blockly.Msg.matrice_create_aff = "Blok olu≈ütur 'ekran sembol√º %1'";
Blockly.Msg.matrice_create_symbole = "Blok olu≈üturun 'sembol√ºn√º ayarlayƒ±n %1'";
Blockly.Msg.matrice = "Matris";
Blockly.Msg.matrice8x8_tooltip = "Matrisin 64 LED'le ba≈ülatƒ±lmasƒ±, baƒülanacak arduino pinlerini belirtmek gerekir DIN, CLK, CS";
Blockly.Msg.matrice8x8_symbole = "Sembol√º tanƒ±mla";
Blockly.Msg.matrice8x8_symbole_tooltip = "Matris i√ßin bir sembol tanƒ±mƒ±: \n 0 LED'i kapatma \n 1 LED'i a√ßma";
Blockly.Msg.matrice8x8_efface = "Matrisi sil";
Blockly.Msg.matrice8x8_aff = "Sembol√º g√∂ster";
Blockly.Msg.matrice8x8_binaire_tooltip = "1 matrisin LED'ini a√ßar ve 0 kapatƒ±r";
Blockly.Msg.matrice8x8_del_tooltip = "Dizideki koordinatlarƒ±nƒ± g√∂steren bir LED'i a√ßar (kapatƒ±r) \nDikkatle arama 0'dan ba≈ülar";
Blockly.Msg.matrice8x8_aff_tooltip = "√ñnceden tanƒ±mlanmƒ±≈ü sembol√º g√∂ster";
Blockly.Msg.matrice8x8_efface_tooltip = "Matristeki t√ºm LED'leri kapat";
Blockly.Msg.matrice8x8_helpurl = "https://wikifactory.com/+OttoDIY/humanoid";
Blockly.Msg.matrice16x8_tooltip = "Dizinin 128 LED'e ba≈ülatƒ±lmasƒ±. \nMatris <-> Arduino \nSDA <--------> A4 \nSCL <--------> A5";
Blockly.Msg.matrice16x8_symbole = "Sembol√º tanƒ±mla";
Blockly.Msg.matrice16x8_symbole_tooltip = "Matris i√ßin bir sembol tanƒ±mƒ±: \n 0 bir LED'i kapatƒ±r \n 1 LED yakar";
Blockly.Msg.matrice16x8_efface = "Matrisin LED'lerini kapat";
Blockly.Msg.matrice16x8_aff = "Sembol√º g√∂ster";
Blockly.Msg.matrice16x8_binaire_tooltip = "1 matrisin bir LED'ini yakar ve 0 kapatƒ±r";
Blockly.Msg.matrice16x8_del_tooltip = "Matristeki koordinatlarƒ±nƒ± g√∂steren bir LED'i a√ßar (kapatƒ±r) \nDikkatle arama 0'dan ba≈ülar";
Blockly.Msg.matrice16x8_aff_tooltip = "√ñnceden tanƒ±mlanmƒ±≈ü sembol√º g√∂ster";
Blockly.Msg.matrice16x8_efface_tooltip = "Matristeki t√ºm LED'leri kapatƒ±n";
Blockly.Msg.matrice16x8_helpurl = "";
//time
Blockly.Msg.millis ="Ge√ßen zaman";
Blockly.Msg.millis_start="Zaman i≈üleyi≈üini ba≈ülat";
Blockly.Msg.millis_tooltip="";
Blockly.Msg.millis_start_tooltip="";
Blockly.Msg.ARDUINO_INOUT_Pulsein = "pime uygulanan YUKARI veya A≈ûAƒûI darbesinin mikrosaniye cinsinden s√ºresini d√∂nd√ºr√ºr.Parametre deƒüeri Y√úKSEK ise, blok pimin Y√úKSEK olmasƒ±nƒ± bekler, sonra zamanlamayƒ± ba≈ülatƒ±r, pimin D√ú≈û√úK seviyeye geri d√∂nmesini bekler ve sonra zamanlamayƒ± durdurur ";
Blockly.Msg.ARDUINO_BASE_DELAY = "‚è≤ Bekle";
Blockly.Msg.ARDUINO_BASE_DELAY_TOOLTIP = "Bekleme s√ºresini saniye, milisaniye veya mikrosaniye olarak belirtin. \nProgram bu s√ºre zarfƒ±nda ba≈üka bir ≈üey yapmAaz";
Blockly.Msg.millis1 = "S√ºresi";
Blockly.Msg.millis2 = "ba≈ülangƒ±√ßtan beri";
Blockly.Msg.ARDUINO_SINCE_PROGRAM_STARTED_TOOLTIP = "programƒ±n ba≈ülamasƒ±ndan bu yana ge√ßen s√ºreyi milisaniye, saniye veya mikrosaniye cinsinden d√∂nd√ºr√ºr";
Blockly.Msg.ARDUINO_PULSEIN = "Durum s√ºresi";
Blockly.Msg.tempo_helpurl = "https://www.arduino.cc/en/tutorial/blink";
Blockly.Msg.tempo_tooltip = "Bu blok, belirtilen zamanƒ±n gelip gelmediƒüini kontrol eder, eƒüer zaman geldiyse i√ßine yerle≈ütirilen bloklarƒ± y√ºr√ºt√ºr. 'Bekle' bloƒüunun aksine engelleme yapmaz." ;
Blockly.Msg.tempo1 = "T√ºm√º";
//OLED
Blockly.Msg.lp2i_u8g_draw_string = "OLED I2C Ekran";
Blockly.Msg.lp2i_u8g_draw_string_Text = "G√∂r√ºnt√ºlenecek metin=";
Blockly.Msg.lp2i_u8g_draw_string_X = "sƒ±ra x (127 maks) =";
Blockly.Msg.lp2i_u8g_draw_string_Y = "satƒ±r y (63 maks) =";
Blockly.Msg.lp2i_u8g_draw_4strings = "OLED I2C Ekran";
Blockly.Msg.lp2i_u8g_draw_4strings_texts_to_display = "G√∂r√ºnt√ºlenecek metinler:";
Blockly.Msg.lp2i_u8g_draw_4strings_Text_line1 = "Satƒ±r 1 =";
Blockly.Msg.lp2i_u8g_draw_4strings_Text_line2 = "Satƒ±r 2 =";
Blockly.Msg.lp2i_u8g_draw_4strings_Text_line3 = "Satƒ±r 3 =";
Blockly.Msg.lp2i_u8g_draw_4strings_Text_line4 = "Satƒ±r 4 =";
Blockly.Msg.lp2i_u8g_print = "OLED I2C Ekran";
Blockly.Msg.lp2i_u8g_print_N = "G√∂r√ºnt√ºlenecek sayƒ± ="
Blockly.Msg.lp2i_u8g_print_X = "sƒ±ra x (127 maks) =";
Blockly.Msg.lp2i_u8g_print_Y = "satƒ±r y (63 maks) =";
Blockly.Msg.lp2i_u8g_4draw_print = "OLED I2C Ekran";
Blockly.Msg.lp2i_u8g_4draw_print_to_display = "g√∂r√ºnt√ºle";
Blockly.Msg.lp2i_u8g_4draw_print_Text_line1 = "G√∂r√ºnt√ºle : 1 =";
Blockly.Msg.lp2i_u8g_4draw_print_N1 = "Numara 1 (sonunda) ="
Blockly.Msg.lp2i_u8g_4draw_print_Text_line2 = "G√∂r√ºnt√ºle : 2 =";
Blockly.Msg.lp2i_u8g_4draw_print_N2 = "Numara 2 (sonunda) ="
Blockly.Msg.lp2i_u8g_4draw_print_Text_line3 = "G√∂r√ºnt√ºle : 3 =";
Blockly.Msg.lp2i_u8g_4draw_print_N3 = "Numara 3 (sonunda) ="
Blockly.Msg.lp2i_u8g_4draw_print_Text_line4 = "G√∂r√ºnt√ºle : 4 =";
Blockly.Msg.lp2i_u8g_4draw_print_N4 = "Numara 4 (sonunda) ="
// LED
Blockly.Msg.ARDUINO_INOUT_BUILDIN_LED_INPUT = "Karttaki LED";
Blockly.Msg.ARDUINO_INOUT_BUILDIN_LED_TOOLTIP = "Arduino kartƒ±ndaki LED'i kapatƒ±n veya a√ßƒ±n";
Blockly.Msg.blink = "kart LED'i yanƒ±p s√∂ner";
Blockly.Msg.blink_tooltip = "Kart LED'i saniyede 1 veya 10 kez yanƒ±p s√∂ner";
Blockly.Msg.del = "pim e baƒülƒ± LED";
Blockly.Msg.del_tooltip = "belirtilen pime baƒülƒ± LED'i a√ßar (kapatƒ±r)";
Blockly.Msg.bargraphe = "√ßubuk grafik";
Blockly.Msg.bargraphe_allume="LED'leri a√ß";
Blockly.Msg.bargraphe_allume_tooltip="0 LED ƒ±≈üƒ±k yok  \n2,5 ilk 2 LED'i yanar ve 3. yarƒ± yanar \n10 t√ºm LED'ler yanar";
Blockly.Msg.bargraphe_tooltip = "10 LED'den olu≈üan (8 ye≈üil, 1 sarƒ± ve 1 kƒ±rmƒ±zƒ±) √ßubuk grafik mod√ºl√º, √ºzerinde DCKI ve DI baƒülanacak arduino pinlerini belirtmek gerekir";
Blockly.Msg.rvb_init="LED RGB";
Blockly.Msg.rvb_init_tooltip="RGB LED'ine baƒülanacak PWM pinlerini belirtir";
Blockly.Msg.rvb_set="rengi g√∂ster";
Blockly.Msg.rvb_anode="common anode";
Blockly.Msg.rvb_cathode="common cathode";
Blockly.Msg.rvb_set_x="X Led on the board.Show color";
Blockly.Msg.rvb_set_tooltip="√º√ß bile≈üen (kƒ±rmƒ±zƒ±, ye≈üil, mavi) i√ßin bir deƒüer belirten bir renk g√∂r√ºnt√ºler";
Blockly.Msg.pixel1 = "RGB NeoPixel";
Blockly.Msg.pixel2 = "pikselleri g√ºncelle";
Blockly.Msg.pixel3 = "renkli";
Blockly.Msg.pixel4 = "sayƒ±";
Blockly.Msg.pixel5 = "piksel parlaklƒ±ƒüƒ±nƒ± olarak ayarla";
Blockly.Msg.pixel6 = "pikseli ayarla";
Blockly.Msg.pixel1_tooltip="neopiksel RGB mod√ºl√º baƒülanacak pimi ve piksel sayƒ±sƒ±nƒ± g√∂sterir";
Blockly.Msg.pixel2_tooltip="yapƒ±lan deƒüi≈üiklikleri g√∂ster";
Blockly.Msg.pixel5_tooltip="piksel parlaklƒ±ƒüƒ±nƒ± ayarlar (0 ila 255)";
Blockly.Msg.pixel3_tooltip="aydƒ±nlatƒ±lacak pikseli ve rengini se√ßin \ nDikkat numaralandƒ±rma 0'dan ba≈ülar";
// output
Blockly.Msg.ARDUINO_INOUT_DIGITAL_WRITE_INPUT1 = "DIJITAL pinini kullan";
Blockly.Msg.ARDUINO_INOUT_DIGITAL_WRITE_TOOLTIP = "wrbelirli bir √ßƒ±ktƒ±ya 0 veya 1 mantƒ±ksal durum yazƒ±n";
Blockly.Msg.toggle = "Pinin durumunu deƒüi≈ütir";
Blockly.Msg.toggle_tooltip = "Ge√ßi≈ü: \n Belirtilen √ßƒ±ktƒ±da bir durum 1 (ve tam tersi) olmadan √∂nce 0 mantƒ±ksal durumu yazƒ±n";
Blockly.Msg.ARDUINO_INOUT_ANALOG_WRITE_INPUT1 = "PWM pinini kullan";
Blockly.Msg.ARDUINO_INOUT_ANALOG_WRITE_TOOLTIP = "belirli bir √ßƒ±ktƒ±da 0 ile 255 arasƒ±nda bir deƒüer g√∂nder";
// input
Blockly.Msg.ARDUINO_INOUT_DIGITAL_READ_INPUT = "DIjITAL pin durumu";
Blockly.Msg.in_pullup = "Yukarƒ± √ßekme";
Blockly.Msg.in_pullup_tooltip = "belirtilen pimin mantƒ±ksal durumunu (0 veya 1) d√∂nd√ºr√ºr \npull-up etkinse varsayƒ±lan olarak 1'i (y√ºksek durum) d√∂nd√ºr√ºr";
Blockly.Msg.ARDUINO_INOUT_DIGITAL_READ_TOOLTIP = "dijital pimin 0 veya 1 mantƒ±ksal durumunu oku";
Blockly.Msg.ARDUINO_INOUT_ANALOG_READ_INPUT = "ANALOG pin deƒüeri";
Blockly.Msg.ARDUINO_INOUT_ANALOG_READ_TOOLTIP = "0 ile 1023 arasƒ±nda bir deƒüer d√∂nd√ºr√ºr";
// audio
Blockly.Msg.play = "√áal";
Blockly.Msg.play_tooltip = "Notayƒ± √ßal";
Blockly.Msg.play_helpurl = "";
Blockly.Msg.beep = "Pimdeki bip sesi";
Blockly.Msg.beep_TOOLTIP = "se√ßilen pinte bip sesi (1 saniye boyunca 440Hz'de)";
Blockly.Msg.ARDUINO_TONE_INPUT1 = "Pinden bir ses √ßƒ±kar";
Blockly.Msg.ARDUINO_TONE_INPUT1_X = "üéº Internal Buzzer";
Blockly.Msg.ARDUINO_TONE_INPUT2 = "frekans (Hz)";
Blockly.Msg.ARDUINO_TONE_INPUT3 = "s√ºre (ms)";
Blockly.Msg.ARDUINO_TONE_TOOLTIP = "se√ßilen pinde istenen frekansta ve istenilen s√ºrede bir ses √ßƒ±kar";
Blockly.Msg.ARDUINO_NOTONE_INPUT = "pindeki sesi durdur";
Blockly.Msg.ARDUINO_NOTONE_TOOLTIP = "se√ßilen pindeki sesi durdur";
Blockly.Msg.ARDUINO_RTTTL_BLOCK = "Play blocking RTTTL ";
Blockly.Msg.lp2i_mp3_helpurl = "https://wiki.dfrobot.com/DFPlayer_Mini_SKU_DFR0299";
Blockly.Msg.lp2i_mp3_Volume = "hacim  [0-48]";
Blockly.Msg.lp2i_mp3_autoplay = "Otomatik √áal";
Blockly.Msg.lp2i_mp3 = "MP3 √ßalar";
Blockly.Msg.lp2i_mp3_tooltip = "DFPlayer Mini mp3: \nmod√ºl, ses seviyesi ve √ßalƒ±≈üma modunun ilklendirilmesi \nMod√ºl MP3 <-> Arduino \nRx (2) <------------- -> Tx (1) ";
Blockly.Msg.lp2i_mp3_play = "mp3 dosyasƒ±nƒ± √ßal";
Blockly.Msg.lp2i_mp3_play_track_tooltip = "belirtilen ≈üarkƒ±yƒ± √ßal";
Blockly.Msg.lp2i_mp3_play_tooltip = "ge√ßerli ≈üarkƒ±yƒ± √ßalar";
Blockly.Msg.lp2i_mp3_pause = "mp3 dosyasƒ±nƒ± duraklat";
Blockly.Msg.lp2i_mp3_pause_tooltip = "ge√ßerli ≈üarkƒ±yƒ± durdur";
Blockly.Msg.lp2i_mp3_prev = "√∂nceki mp3 dosyasƒ±nƒ± oku";
Blockly.Msg.lp2i_mp3_prev_tooltip = "√∂nceki par√ßayƒ± √ßal";
Blockly.Msg.lp2i_mp3_vol = "Ses seviyesini ayarla";
Blockly.Msg.lp2i_mp3_vol_tooltip = "sesi belirtilen deƒüere [0-48] ayarlayƒ±n";
Blockly.Msg.lp2i_mp3_next = "a≈üaƒüƒ±daki mp3 dosyasƒ±nƒ± oku";
Blockly.Msg.lp2i_mp3_next_tooltip = "sonraki ≈üarkƒ±yƒ± √ßalar";
// servomotor
Blockly.Msg.ARDUINO_SERVO_MOVE_INPUT1 = "d√∂nd√ºr";
Blockly.Msg.ARDUINO_SERVO_MOVE_DEGREE = "a√ßƒ± [0 ¬∞ -180 ¬∞]";
Blockly.Msg.ARDUINO_SERVO_MOVE_TOOLTIP = "0 ile 180 derece arasƒ±nda olasƒ± d√∂n√º≈ü";
Blockly.Msg.ARDUINO_SERVO_ROT_CONTINUE_TEXT = "d√∂nd√ºr";
Blockly.Msg.ARDUINO_SERVO_ROT_CONTINUE_TOOLTIP = "Belirtilen pime baƒülƒ± servoyu belirtilen hƒ±zda ve se√ßilen y√∂nde d√∂nd√ºr";
//engine
Blockly.Msg.mot_tooltip = "Motor kontrol√∂r√º L293D: \n ilerlemek veya d√∂n√º≈ü yapmak i√ßin her iki motoru da (M1 ve M2) etkinle≈ütirir, hƒ±z 0 ile 90 arasƒ±nda ayarlanabilir";
Blockly.Msg.mot_stop = "stop";
Blockly.Msg.mot_stop_tooltip = "L293D Motor Kontrol Cihazƒ± Korumasƒ±: \niki motoru durdurun (M1 ve M2)";
Blockly.Msg.moteur = "motoru √ßalƒ±≈ütƒ±r";
Blockly.Msg.moteurstop = "motoru durdur";
Blockly.Msg.moteur_tooltip = "belirtilen pime baƒülƒ± DC motoru belirtilen hƒ±zda ba≈ülatƒ±r \nhƒ±z = 0 -> motoru durdur";
Blockly.Msg.moteurdagu_tooltiprs040 = "RS 040 kartƒ±: \n DC motorlarƒ± √ßalƒ±≈ütƒ±rmak i√ßin 2 √ßƒ±kƒ±≈ütan birini etkinle≈ütirir, hƒ±z 0 ile 90 arasƒ±nda ayarlanabilir";
Blockly.Msg.moteurdagu_tooltiprs040stop = "RS 040 kartƒ±: \n 2 motordan birini durdur";
Blockly.Msg.moteurdagu_tooltiprs027 = "RS 027 kartƒ±: \n DC motorlarƒ± √ßalƒ±≈ütƒ±rmak i√ßin 2 √ßƒ±kƒ±≈ütan birini √ßalƒ±≈ütƒ±rƒ±r, hƒ±z 0 ile 90 arasƒ±nda ayarlanabilir";
Blockly.Msg.ADAFRUIT_MOTORSHIELD_MOTOR1 = "v1 - DC Motor";
Blockly.Msg.ADAFRUIT_MOTORSHIELD_MOTOR2 = "v2 - DC Motor";
Blockly.Msg.ADAFRUIT_MOTORSHIELD_MOTOR_DIRECTION = "y√∂n";
Blockly.Msg.ADAFRUIT_MOTORSHIELD_MOTOR_VITESSE = Blockly.Msg.vitesse+"[0-255]";
Blockly.Msg.ADAFRUIT_MOTORSHIELD_AVANT = "ileri";
Blockly.Msg.ADAFRUIT_MOTORSHIELD_ARRIERE = "geriye";
Blockly.Msg.ADAFRUIT_MOTORSHIELD_STOP = "durdur";
Blockly.Msg.ADAFRUIT_MOTORSHIELD_PAP1 = "v1 - Step Motor";
Blockly.Msg.ADAFRUIT_MOTORSHIELD_PAP2 = "v2 - Step Motor";
Blockly.Msg.ADAFRUIT_MOTORSHIELD_CONNECT = "pin";
Blockly.Msg.ADAFRUIT_MOTORSHIELD_MOTOR_PPT = "tur ba≈üƒ±na deƒüil";
Blockly.Msg.ADAFRUIT_MOTORSHIELD_MOTOR_RPM = "Hƒ±z (RPM)";
Blockly.Msg.ADAFRUIT_MOTORSHIELD_MOTOR_NB_PAS = "adƒ±m sayƒ±sƒ±";
Blockly.Msg.ADAFRUIT_MOTORSHIELD_MOTORDC1 = "DC 1 motor";
Blockly.Msg.ADAFRUIT_MOTORSHIELD_MOTORDC2 = "DC 2 motor";
Blockly.Msg.m_pap="adƒ±m adƒ±m motor";
Blockly.Msg.m_pap_step="adƒ±m";
Blockly.Msg.m_pap_step1="ilerle";
Blockly.Msg.m_pap_tooltip = "Adƒ±m motorunun ba≈ülatƒ±lmasƒ±. \nBir adƒ±m sayƒ±sƒ±, rpm cinsinden hƒ±z ve baƒülanmak i√ßin pinleri belirtin";
Blockly.Msg.m_pap_step_tooltip = "adƒ±m motorunu belirtilen adƒ±m sayƒ±sƒ±na g√∂re etkinle≈ütirir, a≈üaƒüƒ±daki talimat yalnƒ±zca motorun d√∂n√º≈ü√º tamamlandƒ±ƒüƒ±nda y√ºr√ºt√ºl√ºr";
// serial
Blockly.Msg.Serial_Init = "Seri baƒülantƒ± noktasƒ± a√ßƒ±k";
Blockly.Msg.Serial_Init_tooltip = "Seri ileti≈üim i√ßin saniyede karakter cinsinden ileti≈üim hƒ±zƒ±nƒ± ayarlayƒ±n";
Blockly.Msg.Serial_Write = "Seri porta g√∂nder";
Blockly.Msg.Serial_write_tooltip = "Seri baƒülantƒ± noktasƒ±na g√∂nder";
Blockly.Msg.Serial_read = "Seri portta veri okunuyor";
Blockly.Msg.Serial_read_tooltip = "seri portta bulunan ilk kullanƒ±labilir veri baytƒ±nƒ± veya veri yoksa -1 deƒüerini d√∂nd√ºr√ºr";
Blockly.Msg.Serial_available = "seri baƒülantƒ± noktasƒ±ndaki veri miktarƒ±";
Blockly.Msg.Serial_available_tooltip = "seri port kuyruƒüunda mevcut bayt sayƒ±sƒ±nƒ± veya hi√ßbir ≈üey yoksa 0 deƒüerini d√∂nd√ºr√ºr";
Blockly.Msg.Serial_saut = "satƒ±r sonu";
Blockly.Msg.Serial_saut_tooltip = "seri monit√∂rde satƒ±r sonu d√∂nd√ºr√ºr";
Blockly.Msg.Serial_space = "bir ayƒ±rƒ±cƒ±";
Blockly.Msg.Serial_space_tooltip = "seri monit√∂rde bo≈üluk bƒ±rak";
Blockly.Msg.repl_read = "kullanƒ±cƒ±nƒ±n girdiƒüi komut";
// software serial
//Blockly.Msg.SSERIAL_Init = "Rx √ºzerinde yazƒ±lƒ±m baƒülantƒ± noktasƒ±";
Blockly.Msg.SSERIAL_tooltip = "Belirtilen pinleri ve hƒ±zƒ± kullanarak yeni bir ileti≈üim portu olu≈üturma";
Blockly.Msg.SSERIAL_Read = "yazƒ±lƒ±m portundan veri okunuyor";
Blockly.Msg.SSERIAL_Read_tooltip = "yazƒ±lƒ±m portunda bulunan ilk verinin baytƒ±nƒ± veya veri yoksa -1'i d√∂nd√ºr√ºr";
Blockly.Msg.SSERIAL_Write = "yazƒ±lƒ±m baƒülantƒ± noktasƒ±na g√∂nder";
Blockly.Msg.SSERIAL_Write_tooltip = "Yazƒ±lƒ±m portuna veri g√∂nder";
Blockly.Msg.SSERIAL_Read_tooltip = "yazƒ±lƒ±m portunda bulunan ilk verinin baytƒ±nƒ± veya veri yoksa -1'i d√∂nd√ºr√ºr";
Blockly.Msg.SSERIAL_Available = "yazƒ±lƒ±m baƒülantƒ± noktasƒ±ndaki veri miktarƒ±";
Blockly.Msg.SSERIAL_Available_tooltip = "yazƒ±lƒ±m baƒülantƒ± noktasƒ± kuyruƒüundaki kullanƒ±labilir bayt sayƒ±sƒ±nƒ± veya hi√ßbir ≈üey yoksa 0 d√∂nd√ºr√ºr";
////////////////////////////OTTO DIY Robot/////////////////////
Blockly.Msg.OTTO9_HOME_TEXT = "Ana Duru≈ü";
Blockly.Msg.OTTO9_HOME_TOOLTIP = "Otto d√ºz pozisyona getirme";
Blockly.Msg.OTTO9H_HOME_TOOLTIP = "Otto goes to home position straight.Reserved pins: 2-leftleg 3-rightleg 4-leftfoot 5-rightfoot 6-leftArm 7-rightArm 8-Trigger US 9-Echo US and 13-Passive buzzer";
Blockly.Msg.OTTO9_DIY_URL = "https://wikifactory.com/+OttoDIY/otto-diy";
Blockly.Msg.OTTO9_HUMANOID_URL = "https://wikifactory.com/+OttoDIY/humanoid";
Blockly.Msg.OTTO9_CALIBRATION='kalibre ';
Blockly.Msg.OTTO9_CALIBRATION_LEG='bacak ';
Blockly.Msg.OTTO9_CALIBRATION_FOOT='ayak ';
Blockly.Msg.OTTO_WHEELS_TEXT = "wheels ";
Blockly.Msg.OTTO_HEAD_TEXT = "head ";
Blockly.Msg.OTTO_FRONT_TEXT = "front ";
Blockly.Msg.OTTO_BACK_TEXT = "back ";
Blockly.Msg.OTTO_HIP_TEXT = "hip ";
Blockly.Msg.OTTO_HELLO_TEXT = "hello";
Blockly.Msg.OTTO_JUMP_TEXT = "jump";
Blockly.Msg.OTTO_SCARED_TEXT = "scared";
Blockly.Msg.OTTO_WALK_TEXT = "walk";
Blockly.Msg.OTTO_ROLL_TEXT = "roll";
Blockly.Msg.OTTO_MODE_TEXT = " mode";
Blockly.Msg.OTTO9_ARMS_TEXT = "arms ";
Blockly.Msg.OTTO9_CALIBRATION_ARM='kol ';
Blockly.Msg.OTTO9_CALIBRATION_TOOLTIP='Yinelemeli olarak k√º√ß√ºk pozitif ve negatif deƒüerler kullanƒ±n (+5,-5 gibi), tamamen d√ºz olana kadar kademeli olarak deƒüi≈ütirin (90¬∫)';
Blockly.Msg.OTTO9_EEPROM_TEXT= 'D√ºzenlemeyi EEPROM a kaydet';
Blockly.Msg.OTTO9_EEPROM_TOOLTIP= 'Sadece bir kez tamamen d√ºz (90¬∫) olana kadar kullanƒ±n, daha sonra programlama i√ßin bu BLOƒûU silin';
Blockly.Msg.OTTO9_MOVE_TEXT = "Hareket";
Blockly.Msg.OTTO9_MOVE_TOOLTIP = "Otto temel hareketleri";
Blockly.Msg.OTTO9_MOVE_CHOICE = [["‚Üë ileri", "FORWARD"], ["‚Üì geriye", "BACKWARD"], ["‚Ü∫ sola d√∂n", "LEFT"], ["‚Üª saƒüa d√∂n", "RIGHT"], ["sola viraj", "BENDLEFT"], ["saƒüa viraj", "BENDRIGHT"], ["Sol bacaƒüƒ± salla", "SHAKELEFT"], ["Saƒü bacaƒüƒ± salla", "SHAKERIGHT"], ["Zƒ±pla", "jump"]];
Blockly.Msg.OTTO9_MOVEW_CHOICE = [["‚Üë ileri", "FORWARD"], ["‚Üì geriye", "BACKWARD"], ["‚Ü∫ sola d√∂n", "LEFT"], ["‚Üª saƒüa d√∂n", "RIGHT"]];
Blockly.Msg.OTTO9_MOVE_SPEED_TEXT = "hƒ±z";
Blockly.Msg.OTTO9_MOVE_SPEED_CHOICE = [["normal", "1000"],["yava≈ü", "2000"],["√ßok yava≈ü", "3000"] , ["hƒ±zlƒ±", "750"], ["√ßok hƒ±zlƒ±", "500"], ["Hƒ±zlƒ± yol alma", "250"]];
Blockly.Msg.OTTO9_MOVEW_SPEED_CHOICE = [["normal", "45"],["yava≈ü", "20"],["√ßok yava≈ü", "10"] , ["hƒ±zlƒ±", "60"], ["√ßok hƒ±zlƒ±", "90"]];
Blockly.Msg.OTTO9_DANCE_TEXT = "Dans";
Blockly.Msg.OTTO9_DANCE_TOOLTIP = "Otto dansƒ±!";
Blockly.Msg.OTTO9_DANCE_CHOICE = [["Sola Ay y√ºr√ºy√º≈ü√º ‚üµ", "moonwalkerLEFT"],  ["Saƒüa Ay y√ºr√ºy√º≈ü√º ‚ü∂", "moonwalkerRIGHT"],["Sola ge√ßi≈ü ‚üµ", "crusaitoLEFT"],["Saƒüa ge√ßi≈ü ‚ü∂", "crusaitoRIGHT"], ["√ñne kanat √ßƒ±rpma ‚Üë", "flappingFRONT"], ["Arkaya kanat √ßƒ±rpma ‚Üì", "flappingBACK"]];
Blockly.Msg.OTTO9_DANCE_SIZE_TEXT = "Boyut";
Blockly.Msg.OTTO9_DANCE_SIZE_CHOICE = [["normal", "25"], ["k√º√ß√ºk", "10"], ["b√ºy√ºk", "40"]];
Blockly.Msg.OTTO9_DO_TEXT = "Yap";
Blockly.Msg.OTTO9_DO_TOOLTIP = "Otto karma≈üƒ±k hareketler";
Blockly.Msg.OTTO9_DO_CHOICE = [ ["salƒ±nmak", "swing"], ["yukarƒ± a≈üaƒüƒ±", "updown"], ["sessizce salƒ±nmak", "tiptoeSwing"], ["seƒüirme", "jitter"], ["Artan D√∂n√º≈ü", "ascendingTurn"]];
Blockly.Msg.OTTO9_GESTURE_TEXT = "Mimik";
Blockly.Msg.OTTO9_GESTURE_TOOLTIP = "Hareketlerle birle≈ütirilmi≈ü duygusal sesler";
Blockly.Msg.OTTO9_GESTURE_CHOICE = [["üòÉ Mutlu1", "OttoSuperHappy"],["üôÇ Mutlu2", "OttoHappy"], ["üôÅ √úzg√ºn", "OttoSad"], ["üò¥ Uykulu", "OttoSleeping"], ["üòï Karƒ±≈üƒ±k", "OttoConfused"], ["üò∞ Korkun√ß", "OttoFretful"], ["üòç A≈ük dolu", "OttoLove"], ["üò° kƒ±zgƒ±n", "OttoAngry"], ["ü§© B√ºy√ºl√º", "OttoMagic"], ["üòê Dalga", "OttoWave"], [" üòé Zafer", "OttoVictory"], ["üòû Ba≈üarƒ±sƒ±z", "OttoFail"], ["üí© Pƒ±rt", "OttoFart"]];
Blockly.Msg.OTTO9_SOUND_TEXT = "Ses";
Blockly.Msg.OTTO9_SOUND_TOOLTIP = "Duygusal sesler";
Blockly.Msg.OTTO9_SOUND_CHOICE = [ ["üòÉ Mutlu1", "S_superHappy"], ["üôÇ Mutlu2", "S_happy"], ["üòä Mutlu3", "S_happy_short"], ["üôÅ √úzg√ºn", "S_sad"], ["üòï Karƒ±≈üƒ±k", "S_confused"], ["ü§ó Sevimli", "S_cuddly"], ["üòÆ ≈ûa≈ükƒ±n", "S_OhOoh"], ["üòØ √áok ≈üa≈üƒ±rmƒ±≈ü", "S_OhOoh2"], ["üò≤ S√ºpriz", "S_surprise"],["ü§ñ Baƒülan", "S_connection"], [" ü§ñ Baƒülantƒ±yƒ± kes", "S_disconnection"], ["üëá ƒ∞tme", "S_buttonPushed"], ["‚ùó 1", "S_mode1"], ["‚ùó‚ùó 2", "S_mode2"], ["‚ùó‚ùó‚ùó 3", "S_mode3"], ["üí§ Uykulu", "S_sleeping"], ["üí© Pƒ±rt1", "S_fart1"], ["üí© Pƒ±rt2", "S_fart2"], ["üí© Pƒ±rt3", "S_fart3"],];
Blockly.Msg.OTTO9_GETDISTANCE_TEXT = "Mesafe [cm].Pin Trigger 8 Pin Echo 9";
Blockly.Msg.OTTO9_GETDISTANCE_TEXT2 = "Pin Trigger 8 Pin Echo 9";
Blockly.Msg.OTTO9_GETDISTANCE_TOOLTIP = "2 cm ila 400 cm arasƒ±nda deƒüi≈üen mesafe";
Blockly.Msg.OTTO9_GETOBSTACLE_TEXT = "Engel";
Blockly.Msg.OTTO9_OBSTACLE_CHOICE = [["kapat", "10"],["√ßok yakƒ±n", "3"],["uzak", "30"]];
Blockly.Msg.OTTO9_GETNOISE_TEXT = "G√ºr√ºlt√º √∂l√ß√ºm√º. Pin A6";
Blockly.Msg.OTTO9_GETNOISE_TOOLTIP = "100 sessiz, 500 g√ºr√ºlt√ºl√º ve 1000'den fazla ise y√ºksek g√ºr√ºlt√º, ayrƒ±ca sens√∂r trimpot duyarlƒ±lƒ±ƒüƒ±nƒ± ayarlayƒ±n";
Blockly.Msg.OTTO9_GETTOUCH_TEXT = "Dokunma. Pin A0";
Blockly.Msg.OTTO9_GETTOUCH_TOOLTIP = "≈üartlƒ±ysa kullan";
Blockly.Msg.OTTO9_GETG_TEXT = "Hareket.Read the accelerations and angular velocities.";
Blockly.Msg.OTTO9_GETG_TEXT2 = "Value";
Blockly.Msg.OTTO9_GETG_TEXT2 = "Value";
Blockly.Msg.OTTO9_MOUTH_TEXT = "Aƒüƒ±z";
Blockly.Msg.OTTO9_MOUTH_TOOLTIP = "8x8 LED matrisi #0-30 i√ßin Aƒüƒ±z hissi";
Blockly.Msg.OTTO9_MOUTH_CHOICE = [["üòÉ mutlu1", "happyOpen"],["üôÇ mutlu2", "happyClosed"], ["üòä g√ºl√ºmseme", "smile"], ["üò¶ √ºzg√ºn1", "23"], ["üôÅ √ºzg√ºn2", "24"], ["üòÆ s√ºpriz", "smallSurprise"], ["üò≤ S√ºpriz 2", "bigSurprise"], ["üòï Karƒ±≈üƒ±k", "confused"],["üòõ Dil", "tongueOut"],["üôÉ Aptal", "culito"],  ["üòë Ciddi", "lineMouth"], ["üôÑ Sinirleri bozuk", "21"], ["üíñ Kalp", "heart"], ["ü¶á v1", "vamp1"], ["ü¶á v2", "vamp2"], ["‚ùå Hayƒ±r", "xMouth"], ["‚úÖ Tamam", "okMouth"],["‚ùì?", "27"], ["‚ö° ≈ûim≈üek", "thunder"]];
Blockly.Msg.OTTO9_EYES_TEXT = "G√∂zler";
Blockly.Msg.OTTO9_EYES_TEXT2 = "Pins: I2C";
Blockly.Msg.OTTO9_MOUTH_TEXT2 = "Pins: DIN A3, CS A2, CLK A1";
Blockly.Msg.OTTO9_EYES_TOOLTIP = "16x8 i2C LED matrisi i√ßin g√∂zlerin duygusu";
Blockly.Msg.OTTO9_EYES_CHOICE = [["üòÉ Mutlu1", "happy_bmp"],["üôÇ Mutlu2", "eyes_bmp"], ["üò¶ √úzg√ºn", "sad_bmp"], ["üò° Kƒ±zgƒ±n1", "angry_bmp"], ["üò° Kƒ±zgƒ±n2", "angry2_bmp"], ["üò∞ Saƒü duyulu", "freetful_bmp"], ["üòï Karƒ±≈üƒ±k", "confused_bmp"],["üò¥ Uykulu", "sleep_bmp"],["üòç A≈ük", "love_bmp"],  ["üòë Dalga", "wave_bmp"], ["ü§© B√ºy√ºl√º", "magic_bmp"], ["üòû Ba≈üarƒ±sƒ±z", "fail_bmp"], ["ü§ñ logo", "logo_bmp"], ["‚ùå‚ùå Hayƒ±r", "XX_bmp"], ["x x", "xx_bmp"],["‚ñâ", "full_bmp"]];
Blockly.Msg.OTTO9_EYESTEXT_TEXT = "G√∂zlerin metni";
Blockly.Msg.OTTO9_EYES_CLEAR_TEXT = " G√∂zleri temizle";
Blockly.Msg.OTTO9_MATRIX_TOOLTIP = "A dan Z'ye B√ºy√ºk Harfler, 0 ile 9 arasƒ± Numaralar: ; < >  = @, Maks.9 karakter sƒ±nƒ±rƒ±";
Blockly.Msg.OTTO9_MATRIXTEXT_TEXT = "Aƒüzƒ±n metni";
Blockly.Msg.OTTO9_CLEAR_TEXT = " Aƒüzƒ± temizle";
Blockly.Msg.OTTO9_CLEAR_TOOLTIP = "8x8 Aƒüƒ±z matrisinin t√ºm LED'lerini kapat";
Blockly.Msg.OTTO9_ARMS_TEXT = "Kollar";
Blockly.Msg.OTTO9_ARMS_TOOLTIP = "Kollarƒ± hareket ettirin!";
Blockly.Msg.OTTO9_ARMS_CHOICE = [["eller yukarƒ±", "HANDSUP"], ["el dalgasƒ± sol", "HANDWAVE1"], ["el dalgasƒ± saƒü", "HANDWAVE2"]];

/// ESP8266
Blockly.Msg.OTTO9_YL="Left leg";
Blockly.Msg.OTTO9_YR="Right leg";
Blockly.Msg.OTTO9_RL="Left foot";
Blockly.Msg.OTTO9_RR="Right foot";
Blockly.Msg.OTTO9_BUZZER="Buzzer";
Blockly.Msg.OTTO_HOME_TOOLTIP = "Otto goes to home position straight.";
Blockly.Msg.OTTO_HOME_TEXT = "Configuration";

////////////ESCORNABOT Robot////////// ONLY TRANSLATE THE LEFT PART INSIDE ["THIS YES" ,NOT]
Blockly.Msg.ESCORNABOT_MODE_TEXT="Init Escornabot";
Blockly.Msg.ESCORNABOT_MODE_CHOICE= [["Weak", ""], ["Strong", "(2)"], ["Medium", "(3)"]];;
Blockly.Msg.ESCORNABOT_INIT_TOOLTIP="Mode choice: 1-> weaker but less electrical consumption, 2->Stronger, but needs more supply, 3->Intermediate mode ";
Blockly.Msg.ESCORNABOT_URL="https://escornabot.com/es/index";
Blockly.Msg.ESCORNABOT_SPIN="Spin: ";
Blockly.Msg.ESCORNABOT_SPIN_NUMBER="N¬∫: ";
Blockly.Msg.ESCORNABOT_SPIN_TOOLTIP="Indicate spin number(admits negative value if reverse is wanted) and velocity"
Blockly.Msg.ESCORNABOT_SPIN_VELOCITY_TEXT="Velocity: "
Blockly.Msg.ESCORNABOT_SPIN_VELOCITY=[["Slow", "5"], ["Medium", "10"], ["Quick", "15"]];;
Blockly.Msg.ESCORNABOT_DISTANCE="Run distance: ";
Blockly.Msg.ESCORNABOT_DISTANCE_TEXT="cm: ";
Blockly.Msg.ESCORNABOT_DISTANCE_TOOLTIP="Indicate distance in cm (negative values will imply reverse mode) and velocity";
Blockly.Msg.ESCORNABOT_TURNSPIN_TEXT="Turn by X spins: ";
Blockly.Msg.ESCORNABOT_TURNSPIN_TOOLTIP="Turn clockwise/anticlockwise (depending on wether you introduce positive or negative values of spin number you desire)";
Blockly.Msg.ESCORNABOT_TURNANGLE_TEXT="Angle spin: ";
Blockly.Msg.ESCORNABOT_ANGLE_NUMBER="Angle: "
Blockly.Msg.ESCORNABOT_TURNANGLE_TOOLTIP="Spin by angle (sign value means clockwise/anticlockwise)";
Blockly.Msg.ESCORNABOT_STOP_TEXT="Stop";
Blockly.Msg.ESCORNABOT_STOP_TOOLTIP="What did you think?  ";
Blockly.Msg.ESCORNABOT_BEEP_TEXT="Beep";
Blockly.Msg.ESCORNABOT_TIME_TEXT="ms";
Blockly.Msg.ESCORNABOT_BEEP_TOOLTIP="Beeps as long as the time you specify";
Blockly.Msg.ESCORNABOT_LEDON_TEXT="LED ON: ";
Blockly.Msg.ESCORNABOT_LEDOFF_TEXT="LED OFF: ";
Blockly.Msg.ESCORNABOT_LED_CHOICE=[["Forward", "1"], ["Backward", "3"], ["Left", "2"],["Right", "4"]];;
Blockly.Msg.ESCORNABOT_LEDON_TOOLTIP="Lights on the selected LED diode";
Blockly.Msg.ESCORNABOT_LEDOFF_TOOLTIP="Lights off the selected LED diode";
Blockly.Msg.ESCORNABOT_GETBUTTON_TEXT="Button pushed: ";
Blockly.Msg.ESCORNABOT_GETBUTTON_TOOLTIP="Check if the selected button is being pushed.";
Blockly.Msg.ESCORNABOT_BUTTON_SELECTED=[["Forward", "1"], ["Backward", "3"], ["Left", "2"],["Right", "4"],["Center", "5"]];;
Blockly.Msg.ESCORNABOT_APP_TOOLTIP="Autonomous working";
Blockly.Msg.ESCORNABOT_APP_URL="www.escornabot.com";
Blockly.Msg.ESCORNABOT_USINIT_TEXT="Ultrasound inits";
Blockly.Msg.ESCORNABOT_TRIGGER_TEXT="Trigger pin";
Blockly.Msg.ESCORNABOT_ECHO_TEXT="Echo pin";
Blockly.Msg.ESCORNABOT_GETUS_TEXT="Distance";
Blockly.Msg.ESCORNABOT_GETUS_TOOLTIP="Distance";
Blockly.Msg.ESCORNABOT_IRINIT_TEXT="Inits ir";
Blockly.Msg.ESCORNABOT_IR_TOOLTIP="Initialize infrared sensors";
Blockly.Msg.ESCORNABOT_GETBLACKLEFT_TEXT="Black left detected";
Blockly.Msg.ESCORNABOT_GETBLACKLEFT_TOOLTIP=" TRUE if black detected at left side";
Blockly.Msg.ESCORNABOT_GETBLACKRIGHT_TEXT="Black right detected";
Blockly.Msg.ESCORNABOT_GETBLACKRIGHT_TOOLTIP="TRUE if black detected at right side";
Blockly.Msg.ESCORNABOT_GETWHITELEFT_TEXT="White left detected";
Blockly.Msg.ESCORNABOT_GETWHITELEFT_TOOLTIP="TRUE if white detected at left side";
Blockly.Msg.ESCORNABOT_GETWHITERIGHT_TEXT="White right detected";
Blockly.Msg.ESCORNABOT_GETWHITERIGHT_TOOLTIP="TRUE if white detected at right side";
Blockly.Msg.ESCORNABOT_IRLEFT_TEXT="Left";
Blockly.Msg.ESCORNABOT_IRRIGHT_TEXT="Right";

//SIMPLE SENSORS
Blockly.Msg.BUTTON_NAME="Button";
Blockly.Msg.INTERNAL_BUTTON_NAME="Start button MRTduino board";
Blockly.Msg.BUTTON_LOGIC="Logic inverse";
Blockly.Msg.BUTTON_PRESSED="pressed?";
Blockly.Msg.BUTTON_TOUCH_NAME="Capacity Touch";
Blockly.Msg.KNOCK_NAME="Knock";
Blockly.Msg.KNOCK_DETECTED="detected?";
Blockly.Msg.TILT_NAME="Digital Tilt";
Blockly.Msg.TILT_DETECTED="detected?";
Blockly.Msg.POTE_NAME="Potentiometer";
Blockly.Msg.PERCENT="percent(0-100)%";
Blockly.Msg.VALUE="Value(0-1023)";
Blockly.Msg.PHOTO_NAME="Photo Interrupter";
Blockly.Msg.PHOTO_DETECTED="detected?";
Blockly.Msg.VAR_LM35="LM35 Temperature (¬∫C)";
Blockly.Msg.LDR_NAME="Photocell (LDR or CDS) ";
Blockly.Msg.LDR_DETECTED="detected?";
Blockly.Msg.IR_NAME="Infrared";
Blockly.Msg.IR_DETECTED="sensed?";
Blockly.Msg.FLAME_NAME="Flame";
Blockly.Msg.FLAME_DETECTED="detected?";
Blockly.Msg.SOUND_NAME="Sound (MIC)";
Blockly.Msg.SOUND_AMP_NAME="MIC Amplifier";
Blockly.Msg.SOUND_WINDOWS="Sample Window";
Blockly.Msg.SOUND_DETECTED="detected?";
Blockly.Msg.DHT_NAME="DHT";
Blockly.Msg.DHT_Type="Type";
Blockly.Msg.DHT_Type11="DHT11";
Blockly.Msg.DHT_Type21="DHT21";
Blockly.Msg.DHT_Type22="DHT22";
Blockly.Msg.DHT_Temp="Temperature ¬∫C";
Blockly.Msg.DHT_Humi="Humidity";
Blockly.Msg.DHT_Head="Heat Index ¬∫C";
Blockly.Msg.GAS_NAME="Gas CO (MQ-7)";
Blockly.Msg.GAS_DETECTED="detected?";
Blockly.Msg.ALCOHOL_NAME="Alcohol (MQ-3)";
Blockly.Msg.AIR_NAME="Air quality (MQ-135)";
Blockly.Msg.ALCOHOL_DETECTED="detected?";
Blockly.Msg.VIBRATION_NAME="Vibration";
Blockly.Msg.VIBRATION_DETECTED="detected?";
Blockly.Msg.HALL_NAME="Hall Magnetic";
Blockly.Msg.HALL_DETECTED="detected?";
Blockly.Msg.PIR_NAME="PIR Motion";
Blockly.Msg.PIR_DETECTED="detected?";
Blockly.Msg.VAPOR_NAME="Vapor (Steam)";
Blockly.Msg.ALIGHT_NAME="Ambient Light (TEMT6000)";
Blockly.Msg.WATER_NAME="Water level";
Blockly.Msg.MOISTURE_NAME="Soil Moisture";
Blockly.Msg.JOYSTICK_NAME="Joystick axis";
Blockly.Msg.JOYSTICK_BUTTON="Joystick button";
Blockly.Msg.JOYSTICK_PRESSED="pressed?";
Blockly.Msg.ultrasonic_ranger="HC-SR04 Ultrasonic (cm)";
Blockly.Msg.unit="Unit";
Blockly.Msg.cm="cm";
Blockly.Msg.inch="inch";
Blockly.Msg.TRIG="TRIG Trigger";
Blockly.Msg.Echo="Echo";
Blockly.Msg.VAR_TemSens="Analog NTC Temperature (¬∫C)";
Blockly.Msg.MRTX_BUTTON="MRTNode start button pressed?";
Blockly.Msg.TOUCH="Touch";
//CCS811

Blockly.Msg.CCS811="Init CO2(CCS811) sensor";
Blockly.Msg.CCS811_name="CO2(CCS811) sensor";
Blockly.Msg.CCS811_2="- SDA-SCL and connect WAK to GND";
Blockly.Msg.CCS811_available="Is the sensor available?";
Blockly.Msg.CCS811_readed = "Is the measure readed?";
Blockly.Msg.CCS811_values="value";

//LCD I2C
Blockly.Msg.LCD_I2C_setup = "Init LCD I2C Address";
Blockly.Msg.LCDP_Column = "Columns";
Blockly.Msg.LCDP_Row = "Rows";
Blockly.Msg.LCDP_Column2 = "column";
Blockly.Msg.LCDP_Row2 = "row";
Blockly.Msg.LCDP_Print = "and print";
Blockly.Msg.LCDP_Clear = "LCD I2C clear";
Blockly.Msg.LCDP_scrollDisplay = "LCD I2C scroll display ";
Blockly.Msg.LCDP_setBcklight = "LCD I2C set Backlight ";
Blockly.Msg.LCDP_showCursor = "LCD I2C show Cursor ";
Blockly.Msg.LCDP_blinkCursor = "LCD I2C blink Cursor ";
Blockly.Msg.LCDP_Home = "LCD I2C home";
Blockly.Msg.LCDP_SetCursor = "LCD I2C set cursor";
Blockly.Msg.LCDP_Display = "LCD I2C ";

//GESTURE SENSOR APDS9960
Blockly.Msg.APDS9960_name_gesture = "APDS9960 Gesture";
Blockly.Msg.APDS9960_name_color = "APDS9960 Color";
Blockly.Msg.APDS9960_detection = "detection";
Blockly.Msg.APDS9960_init = "Init APDS9960 gesture and color sensor.";
Blockly.Msg.APDS9960_init2 = "SDA-SCL";
Blockly.Msg.APDS9960_gesture_gain = "Config gesture gain";
Blockly.Msg.APDS9960_color_gain = "Config color gain";
Blockly.Msg.APDS9960_gesture_detected = "detected?";
Blockly.Msg.APDS9960_readgesture = ".Read gesture";
Blockly.Msg.APDS9960_readcolors = "Read color frecuencies";
Blockly.Msg.APDS9960_colors = "Frequency";


//REMOTE CONTROL IR
Blockly.Msg.KEY="Key";
Blockly.Msg.GENERAL_IR="Remote Control IR";
Blockly.Msg.GENERAL_PRESSED="Read key";
Blockly.Msg.PIN="PIN";

//REMOTE CONTROL MRT
Blockly.Msg.MRT_IR="Init Remote Control MRT";
Blockly.Msg.MRT_CHANNEL="Channel";
Blockly.Msg.MRT_KEY="Key MRT";
Blockly.Msg.MRT_PRESSED="Pressed?";
Blockly.Msg.PIN2="Interrupt PIN";

//OPEN SMART MP3
Blockly.Msg.MP3OS_name = "Mp3 OpenSmart";
Blockly.Msg.MP3OS_init = "Init Mp3 Opensmart using software serial";
Blockly.Msg.MP3OS_TX="Port TX#";
Blockly.Msg.MP3OS_RX="Port RX#";
Blockly.Msg.MP3OS_equalizer = "Set equalizer";
Blockly.Msg.MP3OS_volumen = "Set volumen(0-30)";
Blockly.Msg.MP3OS_operation = "Operation:";
Blockly.Msg.MP3OS_check = "Check mp3.Need to be executed in main loop";
Blockly.Msg.MP3OS_playsong = "Play track number";
Blockly.Msg.MP3OS_playsongdirectory = "in folder number";
Blockly.Msg.MP3OS_inject="Inject track number";

//YK5300 MP3
Blockly.Msg.MP3YK_name = "Mp3 YX5300";
Blockly.Msg.MP3YK_init = "Init Mp3 YX5300.";
Blockly.Msg.MP3YK_TX="Pin TX#";
Blockly.Msg.MP3YK_RX="Pin RX#";
Blockly.Msg.MP3YK_equalizer = "Set equalizer";
Blockly.Msg.MP3YK_volumen = "Set volumen(0-30)";
Blockly.Msg.MP3YK_operation = "Operation:";
Blockly.Msg.MP3YK_check = "Check mp3.Need to be executed in main loop";
Blockly.Msg.MP3YK_playsong = "Play track number";
Blockly.Msg.MP3YK_playsongdirectory = "in folder number";
Blockly.Msg.MP3YK_folderrepeat = "Play Folder repeat number";
Blockly.Msg.MP3YK_songrepeat = "Play Track repeat number";
Blockly.Msg.MP3YK_foldershuffle = "Play all files (1-random 0-none)";

//Mu Vision

/*Help*/
Blockly.LKL_VS2_HELP_INIT = "initialize MU vision sensor, and choose the port.";
Blockly.LKL_VS2_HELP_VISION_LEVEL = 'Set the recognition level, the level increases, the false alarm rate decreases, and the recognition rate will decrease accordingly.';//'ËÆæÁΩÆËØÜÂà´Á≠âÁ∫ßÔºåÁ≠âÁ∫ßÂçáÈ´òÔºåËØØÊä•ÁéáÈôç‰ΩéÔºåËØÜÂà´Áéá‰πü‰ºöÁõ∏Â∫îÈôç‰Ωé';
Blockly.LKL_VS2_HELP_VISION_ZOOM = 'Set the image zoom level, the level is raised, the farther the recognition distance is, the smaller the recognition angle is.';//'ËÆæÁΩÆÂõæÂÉèÁº©ÊîæÁ≠âÁ∫ßÔºåÁ≠âÁ∫ßÂçáÈ´òÔºåËØÜÂà´Ë∑ùÁ¶ªË∂äËøúÔºåËØÜÂà´ËßíÂ∫¶Ë∂äÂ∞è';

/*Warning**/
Blockly.LKL_VS2_WARNING_SETUP_ONLY = 'This block can only be placed in the setup block!';
Blockly.LKL_VS2_WARNING_MU_INIT = 'Please DON\'T forget initialize the uart1, Serial1. Configure the bauds too';             //'ËØ∑ÂãøÂêåÊó∂‰ΩøÁî®SerialËøûÊé•MU‰∏éÁîµËÑëÊâìÂç∞Â≠óÁ¨¶ÔºåÊ≠§Êìç‰Ωú‰ºöÂØºËá¥ÁîµËÑëÁ´ØÊâìÂç∞Â≠óÁ¨¶Èîô‰π±ÊàñÈÄö‰ø°ÂºÇÂ∏∏';


//LED color type
Blockly.LKL_VS2_LED_CLOSE = 'Close';					//'ÂÖ≥Èó≠';
Blockly.LKL_VS2_LED_RED = 'Red';						//'Á∫¢Ëâ≤';
Blockly.LKL_VS2_LED_GREEN = 'Green';					//'ÁªøËâ≤';
Blockly.LKL_VS2_LED_YELLOW = 'Yellow';					//'ÈªÑËâ≤';
Blockly.LKL_VS2_LED_BLUE = 'Blue';						//'ËìùËâ≤';
Blockly.LKL_VS2_LED_PURPLE = 'Purple';					//'Á¥´Ëâ≤';
Blockly.LKL_VS2_LED_CYAN = 'Cyan';						//'ÈùíËâ≤';
Blockly.LKL_VS2_LED_WHITE = 'White';					//'ÁôΩËâ≤';
//Vision Zoom
Blockly.LKL_VS2_AUTO = 'auto';							//'Ëá™Âä®';
Blockly.LKL_VS2_VISION_ZOOM = 'Zoom';					//'Áº©Êîæ';
//Vision Level
Blockly.LKL_VS2_LEVEL = 'level';						//'Á≠âÁ∫ß';
Blockly.LKL_VS2_HIGH_SPEED = 'highSpeed';				//'ÈÄüÂ∫¶‰ºòÂÖà';
Blockly.LKL_VS2_NORMAL = 'normal';						//'ÊÄßËÉΩÂùáË°°';
Blockly.LKL_VS2_HIGH_ACCURACY = 'highAccuracy';			//'ÂáÜÁ°ÆÂ∫¶‰ºòÂÖà';
//UART status
Blockly.LKL_VS2_UART_OPEN = 'Open';						//'ÊâìÂºÄ';
Blockly.LKL_VS2_UART_CLOSE = 'Close';					//'ÂÖ≥Èó≠';
//Vision type
Blockly.LKL_VS2_COLOR_BLOCK = 'ColorBlock';             //'Ëâ≤Âùó';
Blockly.LKL_VS2_VISION_COLOR_DETECT = 'ColorBlock';	    //'Ëâ≤ÂùóÊ£ÄÊµã';
Blockly.LKL_VS2_VISION_COLOR_RECOGNITION = 'ColorRecognition';	//'È¢úËâ≤ËØÜÂà´';
Blockly.LKL_VS2_VISION_BALL = 'Ball';					//'ÁêÉ';
Blockly.LKL_VS2_VISION_LINE = 'Line';					//'Á∫øÊù°';
Blockly.LKL_VS2_VISION_BODY = 'Body';					//'‰∫∫‰Ωì';
Blockly.LKL_VS2_VISION_FACE = 'Face';					//'‰∫∫ËÑ∏';
Blockly.LKL_VS2_VISION_TRAFFIC_CARD = 'TrafficCard';	//'‰∫§ÈÄöÂç°Áâá';
Blockly.LKL_VS2_VISION_SHAPE_CARD = 'ShapeCard';		//'ÂΩ¢Áä∂Âç°Áâá';
Blockly.LKL_VS2_VISION_NUM_CARD = 'NumberCard';			//'Êï∞Â≠óÂç°Áâá';
//Card type
Blockly.LKL_VS2_CARD_CIRCLE = 'Circle';					//'ÂúÜÂΩ¢';
Blockly.LKL_VS2_CARD_TRIANGLE = 'Triangle';				//'‰∏âËßíÂΩ¢';
Blockly.LKL_VS2_CARD_SQUARE = 'Square';					//'ÊñπÂΩ¢';
Blockly.LKL_VS2_CARD_TICK = 'Tick';						//'Èí©';
Blockly.LKL_VS2_CARD_CROSS = 'Cross';					//'Âèâ';
Blockly.LKL_VS2_CARD_STRAIGHT = 'Straight';				//'ÂêëÂâç';
Blockly.LKL_VS2_CARD_TURN_LEFT = 'TurnLeft';			//'ÂêëÂ∑¶';
Blockly.LKL_VS2_CARD_TURN_RIGHT = 'TurnRight';			//'ÂêëÂè≥';
Blockly.LKL_VS2_CARD_TURN_AROUND = 'TurnAround';		//'ÊéâÂ§¥';
Blockly.LKL_VS2_CARD_WHISTLE = 'Whistle';				//'È∏£Á¨õ';
Blockly.LKL_VS2_CARD_STOP = 'Stop';						//'ÂÅúÊ≠¢';
//Vision state
Blockly.LKL_VS2_STATE_VALUE_X = 'Horizontal';			//'Ê®™ÂêëÂùêÊ†á';
Blockly.LKL_VS2_STATE_VALUE_Y = 'Vertical';				//'Á∫µÂêëÂùêÊ†á';
Blockly.LKL_VS2_STATE_VALUE_WIDTH = 'Width';			//'ÂÆΩÂ∫¶';
Blockly.LKL_VS2_STATE_VALUE_HEIGHT = 'Height';			//'È´òÂ∫¶';
Blockly.LKL_VS2_STATE_VALUE_R_CHANNEL = 'ChannelR';		//'Á∫¢Ëâ≤ÈÄöÈÅì';
Blockly.LKL_VS2_STATE_VALUE_G_CHANNEL = 'ChannelG';		//'ÁªøËâ≤ÈÄöÈÅì';
Blockly.LKL_VS2_STATE_VALUE_B_CHANNEL = 'ChannelB';		//'ËìùËâ≤ÈÄöÈÅì';
Blockly.LKL_VS2_STATE_VALUE_LABEL = 'Label';			//'Ê†áÁ≠æ';
//True False
Blockly.LKL_VS2_TRUE = 'True';							//'ÊòØ';
Blockly.LKL_VS2_FALSE = 'False';						//'Âê¶';
//Enable Disable
Blockly.LKL_VS2_ENABLE = 'enable';						//'ÂºÄÂêØ';
Blockly.LKL_VS2_DISABLE = 'disable';					//'ÂÖ≥Èó≠';
//Camera AWB
Blockly.LKL_VS2_LOCK_AWB = 'LockAWB';					//'ÈîÅÂÆöÁôΩÂπ≥Ë°°';
Blockly.LKL_VS2_WHITE_LIGHT = 'WhiteLight';				//'ÁôΩÂÖâÊ®°Âºè';
Blockly.LKL_VS2_YELLOW_LIGHT = 'YellowLight';			//'ÈªÑÂÖâÊ®°Âºè';
Blockly.LKL_VS2_ALL = 'All';                            //'ÊâÄÊúâ';

//Other
Blockly.LKL_VS2_COLOR = 'color';						//'È¢úËâ≤';
Blockly.LKL_VS2_DEFAULT = 'default';                    //'ÈªòËÆ§';
Blockly.LKL_VS2_LOW = 'low';                            //'‰Ωé';
Blockly.LKL_VS2_MID = 'middle';                         //'‰∏≠';
Blockly.LKL_VS2_HIGH = 'high';                          //'È´ò';

/*Ê®°ÂùóÊñáÊú¨*/
Blockly.LKL_VS2_MU = 'initialize';									//'ÂàùÂßãÂåñ';
Blockly.LKL_VS2_MODE = 'mode';										//'Ê®°Âºè';
Blockly.LKL_VS2_SetupVS = 'setup';          						//'ËÆæÁΩÆ';
Blockly.LKL_VS2_SET_RECOGNITION_REGION = 'set recognition region';  //'ËÆæÁΩÆËØÜÂà´Âå∫Âüü';
Blockly.LKL_VS2_SET_MIN_RECOGNITION_SIZE = 'set min recognition size';//'ËÆæÁΩÆÊúÄÂ∞èËØÜÂà´Â∞∫ÂØ∏';
Blockly.LKL_VS2_SERIAL = 'port';									//'Á´ØÂè£';
Blockly.LKL_VS2_ADDRESS = 'address';								//'Âú∞ÂùÄ';
Blockly.LKL_VS2_RESET = 'reset to default';						    //'ÊÅ¢Â§çÈªòËÆ§ËÆæÁΩÆ';
Blockly.LKL_VS2_LED_DETECT_COLOR = 'when detected then';			//'ËØÜÂà´Âà∞Áâ©‰Ωì‰∫Æ';
Blockly.LKL_VS2_LED_UNDETECT_COLOR = 'else';				        //'Ê≤°ËØÜÂà´Âà∞Áâ©‰Ωì‰∫Æ';
Blockly.LKL_VS2_BRIGHTNESS = 'brightness';							//'‰∫ÆÂ∫¶';
Blockly.LKL_VS2_VISION_TYPE = 'algorithm';						    //'ÁÆóÊ≥ï';
Blockly.LKL_VS2_SET_VISION_LEVEL = 'level';				            //'ËÆæÁΩÆËØÜÂà´Á≠âÁ∫ß';
Blockly.LKL_VS2_SET_FRAME_ROTATE = 'rotate Frame';					//'ÂõæÂÉèÁøªËΩ¨';
Blockly.LKL_VS2_SET_CAMERA_HFR = 'high FPS mode';   				//'È´òÂ∏ßÁéáÊ®°Âºè';
Blockly.LKL_VS2_SET_CAMERA_AWB = 'camera white balance';			//'ÊëÑÂÉèÂ§¥ÁôΩÂπ≥Ë°°';
Blockly.LKL_VS2_SET_VISION_ZOOM = 'zoom';   					    //'ÂõæÂÉèÁº©ÊîæÁ≠âÁ∫ß';
Blockly.LKL_VS2_SET_UART_BAUD = 'UART baudrate';					//'‰∏≤Âè£Ê≥¢ÁâπÁéá';
Blockly.LKL_VS2_DETECTED = 'detected';								//'Ê£ÄÊµãÂà∞';
Blockly.LKL_VS2_RECOGNIZED = 'recognized';                          //'ËØÜÂà´Âà∞';
Blockly.LKL_VS2_GET_DETECTED_MESSAGE = 'get';						//'Ëé∑Âèñ';
Blockly.LKL_VS2_VALUE = 'value';									//'ÂÄº';
Blockly.LKL_VS2_GET_PIX_COLOR = 'get Position';						//'ÊçïËé∑ÂùêÊ†á';
Blockly.LKL_VS2_CARD_TYPE = 'type';								    //'Âç°ÁâáÁ±ªÂûã';
Blockly.LKL_VS2_SET_DETECT_COLOR = 'setDetectColor';				//'ËÆæÁΩÆËØÜÂà´È¢úËâ≤';
Blockly.LKL_VS2_COORDINATE = 'coordinate';                          //'ÂùêÊ†á';

// Light sensor
Blockly.LKL_VS2_LIGHT_SENSOR = 'light sensor';                      //'ÂÖâÁ∫ø‰º†ÊÑüÂô®';
Blockly.LKL_VS2_SET = 'set';                                        //'ËÆæÁΩÆ';
Blockly.LKL_VS2_SENSITIVITY = 'sensitivity';                        //'ÁÅµÊïèÂ∫¶';
Blockly.LKL_VS2_WB_CORRECTION = 'white balance correction';         //'ÁôΩÂπ≥Ë°°Ê†°ÂáÜ';
Blockly.LKL_VS2_READ = 'read';                                      //'ËØªÂèñ';
Blockly.LKL_VS2_PROXIMITY = 'proximity detection';                  //'Êé•ËøëÊ£ÄÊµã';
Blockly.LKL_VS2_ALS = 'ambient light detection';                    //'ÁéØÂ¢ÉÂÖâÊ£ÄÊµã';
Blockly.LKL_VS2_GESTURE_SENSOR = 'gesture detection';               //'ÊâãÂäøÊ£ÄÊµã';
Blockly.LKL_VS2_GESTURE = 'gesture';                                //'ÊâãÂäø';
Blockly.LKL_VS2_GESTURE_UP = 'upward';                              //'‰∏äÂàí';
Blockly.LKL_VS2_GESTURE_DOWN = 'downward';                          //'‰∏ãÂàí';
Blockly.LKL_VS2_GESTURE_LEFT = 'leftward';                          //'Â∑¶Âàí';
Blockly.LKL_VS2_GESTURE_RIGHT = 'rightward';                        //'Âè≥Âàí';
Blockly.LKL_VS2_GESTURE_LIFT_UP = 'pull';                           //'‰∏äÊä¨';
Blockly.LKL_VS2_GESTURE_PUSH_DOWN = 'push';                         //'‰∏ãÂéã';

// AT WiFi
Blockly.LKL_VS2_SSID = "ssid";                                      //"ÂêçÁß∞";
Blockly.LKL_VS2_PASSWORD = "password";                              //"ÂØÜÁ†Å";
Blockly.LKL_VS2_WAIT_CONNECT = "connection succeeded";              //"ËøûÊé•ÊàêÂäü";
Blockly.LKL_VS2_DISCONNECT = "disconnect";                          //"Êñ≠ÂºÄËøûÊé•";
Blockly.LKL_VS2_CLIENT = "client";                                  //"ÂÆ¢Êà∑Á´Ø";
Blockly.LKL_VS2_HOT_SPOT = "hot-spot";                              //"ÁÉ≠ÁÇπ";
Blockly.LKL_VS2_TARGET_IP = "target IP";                            //"ÁõÆÊ†áIP";
Blockly.LKL_VS2_LOCAL_IP = "local IP";                              //"Êú¨Âú∞IP";
Blockly.LKL_VS2_WRITE = "write";                                    //"ÂÜôÂÖ•";

// SOFTWARE SERIAL FOR BT
Blockly.Msg.SSERIAL_BT_Init="Init Bluetooth - SoftwareSerial";
Blockly.Msg.ESP32Bluetooth = "Init Bluetooth - ESP32 Bluetooth Serial";
Blockly.Msg.SSERIAL_BT_TX="Pin TX#";
Blockly.Msg.SSERIAL_BT_RX="Pin RX#";
Blockly.Msg.SSERIAL_BT_BAUD="Bauds";
Blockly.Msg.SSERIAL_BT_Read="Serial BT Read byte";
Blockly.Msg.SSERIAL_BT_Println="Serial BT Print on new line";
Blockly.Msg.SSERIAL_BT_Print="Serial BT Print on same line";
Blockly.Msg.SSERIAL_BT_Write="Serial BT write"
Blockly.Msg.SSERIAL_BT_Avai="Serial BT Available?";
Blockly.Msg.SSerial_BT_Print_Format="Serial BT Print  Format";
Blockly.Msg.SSERIAL_BT_ReadNum="Serial BT Read as number";
Blockly.Msg.SSERIAL_BT_ReadString="Serial BT Read String";
Blockly.Msg.SSERIAL_BT_Readlf="until line feed";

// SOFTWARE SERIAL
Blockly.Msg.SSERIAL_Init="Init SoftwareSerial";
Blockly.Msg.SSERIAL_TX="Pin TX#";
Blockly.Msg.SSERIAL_RX="Pin RX#";
Blockly.Msg.SSERIAL_BAUD="Baudios";
Blockly.Msg.SSERIAL_Read="SoftwareSerial Read byte";
Blockly.Msg.SSERIAL_Println="SoftwareSerial Print on new line";
Blockly.Msg.SSERIAL_Print="SoftwareSerial Print on same line";
Blockly.Msg.SSERIAL_Write="SoftwareSerial write"
Blockly.Msg.SSERIAL_Avai="SoftwareSerial Available?";
Blockly.Msg.SSerial_Print_Format="SoftwareSerial Print  Format";
Blockly.Msg.SSERIAL_ReadNum="SoftwareSerial Read as number";
Blockly.Msg.SSERIAL_ReadString="SoftwareSerial Read String";
Blockly.Msg.SSERIAL_Readlf="until line feed";

// SERIAL
Blockly.Msg.SERIAL_Init="Init Serial ";
Blockly.Msg.SERIAL_TX="Pin TX#";
Blockly.Msg.SERIAL_RX="Pin RX#";
Blockly.Msg.SERIAL_BAUD="Baudios";
Blockly.Msg.SERIAL_Read="Serial  Read byte";
Blockly.Msg.SERIAL_Println="Serial Print on new line";
Blockly.Msg.SERIAL_Print="Serial Print on same line";
Blockly.Msg.SERIAL_Write="Serial write"
Blockly.Msg.SERIAL_Avai="Serial Available?";
Blockly.Msg.Serial_Print_Format="Serial Print  Format";
Blockly.Msg.SERIAL_ReadNum="Serial Read as number";
Blockly.Msg.SERIAL_ReadString="Serial Read String";
Blockly.Msg.SERIAL_Readlf="until line feed";

//DISPLAY TFT ST7735
Blockly.Msg.ST7735_name = "TFT";
Blockly.Msg.ST7735_init = "Init TFT ST7735 1.8\" or 0.96\".";
Blockly.Msg.ST7735_init2 = "Pins: SCL=SCK SDA=MOSI.";
Blockly.Msg.ST7735_PIN_SCL = "SCL=SCK";
Blockly.Msg.ST7735_PIN_SDA = "SDA=MOSI";
Blockly.Msg.ST7735_PIN_CS = "CS Pin";
Blockly.Msg.ST7735_PIN_RST = "RST or RES Pin";
Blockly.Msg.ST7735_PIN_DC = "A0 or DC Pin";
Blockly.Msg.ST7735_WRAP = "Tab color";
Blockly.Msg.ST7735_FILLBACKGROUND = "Fill backgroundColor";
Blockly.Msg.ST7735_Rotate = "Rotate display";
Blockly.Msg.ST7735_Invert = "Invert display";
Blockly.Msg.ST7735_SetCursor = "Set cursor";
Blockly.Msg.ST7735_X0 = "x0";
Blockly.Msg.ST7735_Y0 = "y0";
Blockly.Msg.ST7735_X1 = "x1";
Blockly.Msg.ST7735_Y1 = "y1";
Blockly.Msg.ST7735_X2 = "x2";
Blockly.Msg.ST7735_Y2 = "y2";
Blockly.Msg.ST7735_TEXTCOLOR = "Set text color";
Blockly.Msg.ST7735_TEXTCOLOR2 = "Set color";
Blockly.Msg.ST7735_TEXTsize = "Set text size";
Blockly.Msg.ST7735_TEXTwrap = "Set text wrap";
Blockly.Msg.ST7735_PrintTextLN = "Print the text/value";
Blockly.Msg.ST7735_PrintTextLN2 = "line feed";
Blockly.Msg.ST7735_DrawPixel = "Draw pixel";
Blockly.Msg.ST7735_Drawlinefrom = "Draw line from";
Blockly.Msg.ST7735_Drawlineto = "to";
Blockly.Msg.ST7735_Drawrectangle = "Draw rectangle";
Blockly.Msg.ST7735_Drawtriangle = "Draw triangle.Corner points";
Blockly.Msg.ST7735_Drawroundrectangle = "Draw round rectangle";
Blockly.Msg.ST7735_Drawroundrectangleradius = "rounding radius";
Blockly.Msg.ST7735_Drawrectanglewidth = "width";
Blockly.Msg.ST7735_Drawrectangleheight = "height";
Blockly.Msg.ST7735_Drawcircle = "Draw circle.Center in";
Blockly.Msg.ST7735_Drawcircleradius = "radius";
Blockly.Msg.ST7735_Drawfill = "Fill";
Blockly.Msg.ST7735_properties = "Return property:";
Blockly.Msg.ST7735_IconName = "Icon name(bmp):";
Blockly.Msg.ST7735_ValueList = "Values(hex array)";
Blockly.Msg.ST7735_DrawiconName = "Draw Icon(bmp) name";

Blockly.Msg.OLED_IconName = "Icon name(bmp):";
Blockly.Msg.OLED_ValueList = "Values(hex array)";
Blockly.Msg.OLED_DrawiconName = "Draw Icon(bmp) name";
Blockly.Msg.OLED_name = "OLED";
Blockly.Msg.OLED_X0 = "x0";
Blockly.Msg.OLED_Y0 = "y0";
Blockly.Msg.OLED_width = "width";
Blockly.Msg.OLED_height = "height";
Blockly.Msg.OLED_COLOR = "Set color";

//TCS34725 color sensor
Blockly.Msg.TCS34725_name_init="Init TCS34725 color sensor";
Blockly.Msg.TCS34725_name_init2="SDA - SCL Gain";
Blockly.Msg.TCS34725_name="TCS34725 color sensor.";
Blockly.Msg.TCS34725_read="Read all values";
Blockly.Msg.TCS34725_values="Value";
Blockly.Msg.TCS34725_color="Is";
Blockly.Msg.TCS34725_color2="color(No gain configured)?";

//HMC5883 compass sensor
Blockly.Msg.HMC5883="Init HMC5883 compass sensor";
Blockly.Msg.HMC5883_2="- SDA - SCL";
Blockly.Msg.HMC5883_read="HMC5883 compass sensor.Read values";
Blockly.Msg.HMC5883_values="value";

//RADIO TEA5767
Blockly.Msg.TEA5767_name = "Radio TEA5767.";
Blockly.Msg.TEA5767_init = "Init Radio TEA5767.SDA - SCL";
Blockly.Msg.TEA5767_turnOFF_ON = "Turn";
Blockly.Msg.TEA5767_muteOFF_ON = "Mute";
Blockly.Msg.TEA5767_Level = "Level of the signal";
Blockly.Msg.TEA5767_Stereo = "Is the signal stereo?";
Blockly.Msg.TEA5767_RadioStation = "Radio Station.";
Blockly.Msg.TEA5767_SetFrequency = "Frequency(Mhz)";
Blockly.Msg.TEA5767_MadridFrequency = "Madrid Radio Station:";

//RFID MFRC522
Blockly.Msg.RFID_name = "RFID MFRC522.";
Blockly.Msg.RFID_init = "Init RFID MFRC522.";
Blockly.Msg.RFID_init2 = "Pins:SCK, MOSI and MISO.";
Blockly.Msg.RFID_PIN_SDA = "SDA Pin";
Blockly.Msg.RFID_PIN_RST = "RST Pin";
Blockly.Msg.RFID_VALID_VAR = "Define Validation card name:";
Blockly.Msg.RFID_STOP = "Stop the current reading";
Blockly.Msg.RFID_C1 = "Value1";
Blockly.Msg.RFID_C2 = "Value2";
Blockly.Msg.RFID_C3 = "Value3";
Blockly.Msg.RFID_C4 = "Value4";
Blockly.Msg.RFID_DETECTED = "Is RFID card detected?";
Blockly.Msg.RFID_READED = "Is RFID card readed?";
Blockly.Msg.RFID_CARD_READED = "Value of the read card";
Blockly.Msg.RFID_CHECK_CARD = "Is RFID card read equal to the validation card";
Blockly.Msg.RFID_CHECK_CARD2 = "?";
Blockly.Msg.RFID_PIN_SCK = "SCK";
Blockly.Msg.RFID_PIN_MISO = "MISO";
Blockly.Msg.RFID_PIN_MOSI = "MOSI";

//NFC PN532
Blockly.Msg.NFC_name = "üí≥ NFC ";
Blockly.Msg.NFC_init = "NFC I2C ";
Blockly.Msg.NFC_VALID_VAR = "Validation card(4bytes):";
Blockly.Msg.NFC_VALID_VAR2 = "Validation card(7bytes):";
Blockly.Msg.NFC_C1 = "Value1";
Blockly.Msg.NFC_C2 = "Value2";
Blockly.Msg.NFC_C3 = "Value3";
Blockly.Msg.NFC_C4 = "Value4";
Blockly.Msg.NFC_C5 = "Value5";
Blockly.Msg.NFC_C6 = "Value6";
Blockly.Msg.NFC_C7 = "Value7";
Blockly.Msg.NFC_DETECTED = "card detected?";
Blockly.Msg.NFC_CARD_READED = "Read Value";
Blockly.Msg.NFC_CHECK_CARD = "Is card Read = Validation card";
Blockly.Msg.NFC_CHECK_CARD2 = "?";

//KEYBOARD AND MOUSE
Blockly.Msg.KeyboardFunction = "Keyboard";
Blockly.Msg.KeyPressed = "Key";
Blockly.Msg.WriteText= "Write text";
Blockly.Msg.LineFeed= "Line Feed";
Blockly.Msg.MouseFunction = "Mouse";
Blockly.Msg.MouseMoveX="X Pos";
Blockly.Msg.MouseMoveY="Y pos";
Blockly.Msg.MouseMoveW="Wheel";

//GPS
Blockly.Msg.GPS_name = "GPS NEO-6";
Blockly.Msg.GPS_init = "Init GPS using software serial";
Blockly.Msg.GPS_TX="TX#";
Blockly.Msg.GPS_RX="RX#";
Blockly.Msg.GPS_readvalues = "Read and save values using software serial";
Blockly.Msg.GPS_paramter = "Location Parameters:";
Blockly.Msg.GPS_paramter3 = "DateTime:";

//TM1640
Blockly.Msg.TM1640_init = "Init TM1640 Led matrix";
Blockly.Msg.TM1640_SCL="SCL Pin";
Blockly.Msg.TM1640_SDA="SDA Pin";

//MOTOR MRT
Blockly.Msg.MOTOR_Connector="Motor";
Blockly.Msg.MOTOR_MRTX_Connector="MRTX-Uno Motor";
Blockly.Msg.MOTOR_Direction="Direction";
Blockly.Msg.MOTOR_speed="Speed(0-255)";
Blockly.Msg.MOTOR_Stop="Stop";

//STEPPERS
Blockly.Msg.STEEPER_name="Init Stepper ID";
Blockly.Msg.STEEPER_name2="Init Stepper28BYJ ID";
Blockly.Msg.STEEPER2_name="Stepper ID";
Blockly.Msg.STEEPER2_name2="Stepper28BYJ ID";
Blockly.Msg.STEEPER_steprev="Steps/Rev.";
Blockly.Msg.STEEPER_step="Steps";
Blockly.Msg.STEEPER_speed="Speed (rpm)";
Blockly.Msg.STEEPER_pin1="PIN-A";
Blockly.Msg.STEEPER_pin2="PIN-B";
Blockly.Msg.STEEPER_pin3="PIN-C";
Blockly.Msg.STEEPER_pin4="PIN-D";
Blockly.Msg.STEEPER_Move="Move";
Blockly.Msg.STEEPER_MoveTo="Move to step(0-4096)";
Blockly.Msg.STEEPER_Degree="degrees";
Blockly.Msg.STEEPER_Steps="steps";
Blockly.Msg.STEEPER_DegreeTo="Move to degree";

//WiFi basic functions
Blockly.Msg.WIFI_sta_init = "WIFI.Connect as Station";
Blockly.Msg.WIFI_ap_init = "WIFI.Create an Access Point";
Blockly.Msg.WIFI_sta_ap_init = "WIFI. Station and create an Access Point";
Blockly.Msg.WIFI_password = "password:";
Blockly.Msg.WIFI_ssid = "Wifi ssid:";
Blockly.Msg.WIFI_password_ap = "and this password:";
Blockly.Msg.WIFI_ssid_ap = "Wifi ssid name:";
Blockly.Msg.WIFI_logs = "Enable logs";

//IFTTT
Blockly.Msg.IFTTT_init = "Configuration.Api key";
Blockly.Msg.IFTTT_send = "Send information";
Blockly.Msg.IFTTT_event = "Event as String";
Blockly.Msg.IFTTT_value1 = "Value 1 as String";
Blockly.Msg.IFTTT_value2 = "Value 2 as String";
Blockly.Msg.IFTTT_value3 = "Value 3 as String";

//MQTT
Blockly.Msg.MQTT_name_init = "Configuration MQTT protocol";
Blockly.Msg.MQTT_password = "password:";
Blockly.Msg.MQTT_ssid = "Wifi ssid:";
Blockly.Msg.MQTT_server = "Server (broker):";
Blockly.Msg.MQTT_port = "port:";
Blockly.Msg.MQTT_user = "User:";
Blockly.Msg.MQTT_APIkey = "API Key:";
Blockly.Msg.MQTT_client = "ID client:";
Blockly.Msg.MQTT_topicattend = "Loop MQTT";
Blockly.Msg.MQTT_topicsubscribe = "Subscribe to the topic";
Blockly.Msg.MQTT_topicsubscribe2 = "and save num value in the variable";
Blockly.Msg.MQTT_topicsubscribe3 = "and save text value in the variable";
Blockly.Msg.MQTT_topicpublish = "Publish in the topic";
Blockly.Msg.MQTT_topicvalue = "Value";
Blockly.Msg.MQTT_logs = "Enable logs";

//NTP
//RTC DS3231
Blockly.Msg.NTP_NAME="Init NTP Server.";
Blockly.Msg.NTP_NAME2="NTP Server.";
Blockly.Msg.NTP_READ_RTC="NTP Server.Read the date and time";
Blockly.Msg.NTP_GMT="GMT";
Blockly.Msg.NTP_VALUES="value";
Blockly.Msg.NTP_EPOCH="Epoch";
Blockly.Msg.NTP_DAY="Day";
Blockly.Msg.NTP_MONTH="Month";
Blockly.Msg.NTP_YEAR="Year";
Blockly.Msg.NTP_HOUR="Hour";
Blockly.Msg.NTP_MINUTE="Minute";
Blockly.Msg.NTP_SECOND="Second";
Blockly.Msg.NTP_DOFWEEK="Day of week";
Blockly.Msg.NTP_TEXT_DOFWEEK="Day of week in string";
Blockly.Msg.NTP_TEXT_MONTH="Month in string ";
Blockly.Msg.NTP_TEXT_TIME="Time in string ";

//MAX7219-Led Matrix panel
Blockly.Msg.MAX7219_LM_NAME="Init MAX7219 Led Matrix.";
Blockly.Msg.MAX7219_LM_CS="CS Pin";
Blockly.Msg.MAX7219_LM_CLK="CLK Pin";
Blockly.Msg.MAX7219_LM_DAT="DAT Pin";
Blockly.Msg.MAX7219_LM_Number="Number of matrix";
Blockly.Msg.MAX7219_LM_NAME2="MAX7219 Led matrix#";
Blockly.Msg.MAX7219_LM_Brightness="brightness (0-15)";
Blockly.Msg.MAX7219_LM_SHUTDOWN="Activate";
Blockly.Msg.MAX7219_LM_CLEAR="Clear";
Blockly.Msg.MAX7219_LM_PAINT="Draw this image";
Blockly.Msg.MAX7219_LM_Row="Row(0-7)";
Blockly.Msg.MAX7219_LM_value="Value (bin or hex or dec)";
Blockly.Msg.MAX7219_LM_Column="Column(0-7)";
Blockly.Msg.MAX7219_LM_Led="Set Led";

//Thingspeak
Blockly.Msg.Thingspeak_name_init = "Configuration Thingspeak.";
Blockly.Msg.Thingspeak_name = "Thingspeak.";
Blockly.Msg.Thingspeak_channel = "Channel";
Blockly.Msg.Thingspeak_apiread = "Api read key";
Blockly.Msg.Thingspeak_apiwrite = "Api write key";
Blockly.Msg.Thingspeak_Write= "Write value";
Blockly.Msg.Thingspeak_field = "in field";
Blockly.Msg.Thingspeak_ReadLong= "Read as long the field";
Blockly.Msg.Thingspeak_ReadFloat= "Read as float the field";

//Firebase
Blockly.Msg.Firebase_name_init = "Configuration Firebase.";
Blockly.Msg.firebase_name = "Firebase.";
Blockly.Msg.Firebase_url = "URL";
Blockly.Msg.Firebase_api = "Api key";
Blockly.Msg.Firebase_start = " Initialization in Setup";
Blockly.Msg.Firebase_type = " Store ";
Blockly.Msg.Firebase_read = " Read ";
Blockly.Msg.Firebase_Node = "in node"
Blockly.Msg.Firebase_Value= "value";
Blockly.Msg.Firebase_String_Node="Store a text in node";
Blockly.Msg.Firebase_Read_String_Node="Read the text in node";
Blockly.Msg.firebase_delete = "Delete node";

//Telegram
Blockly.Msg.Telegram_name_init = "Configuration Telegram chat.";
Blockly.Msg.Telegram_name = "Telegram.";
Blockly.Msg.Telegram_BotToken = "BOT token";
Blockly.Msg.Telegram_ChatID = "Chat ID";
Blockly.Msg.Telegram_Loop = "Telegram Loop.Update messages";
Blockly.Msg.Telegram_receive = "Telegram.When message is recived";
Blockly.Msg.TelegramSend= "Send message:";
Blockly.Msg.Telegram_message = "Telegram.Received message";
Blockly.Msg.Telegram_fromName= "Name of person sent the message";

//OpenWeather
Blockly.Msg.Openweather_init = "Configuration OpenWeather.";
Blockly.Msg.Api_key = "Api Key";
Blockly.Msg.ReadWeather = "OpenWeather.Read Weather.";
Blockly.Msg.City = "City";
Blockly.Msg.CountryCode = "Country Code";
Blockly.Msg.OW_Value = "OpenWeather. Value:";
Blockly.Msg.LocationOW = "Location";
Blockly.Msg.Country = "Country";
Blockly.Msg.Icon = "Icon";
Blockly.Msg.Weather = "Weather";
Blockly.Msg.Description = "Description";
Blockly.Msg.OW_Temperature = "Temperature ¬∫C";
Blockly.Msg.Temp_max = "Temperature Max ¬∫C";
Blockly.Msg.Temp_min = "Temperature Min ¬∫C";
Blockly.Msg.Humidity = "Humedad";
Blockly.Msg.Preassure = "Preassure";
Blockly.Msg.Feels_like = "Feels like Temperature ¬∫C";
Blockly.Msg.Cloud = "Cloud %";
Blockly.Msg.Visibility = "Visibility %";
Blockly.Msg.wind_speed = "Wind Speed";
Blockly.Msg.wind_angle = "Wind Angle";
Blockly.Msg.icon_id = "Icon Weather Id";
Blockly.Msg.sunrise = "Sunrise EPOC";
Blockly.Msg.sunset = "Sunset EPOC";

//ESP8266
Blockly.Msg.ESP_yield=" Yield function";
Blockly.Msg.ESP_deepsleep="DeepSleep ";
Blockly.Msg.ESP_timesleep="Seconds";
Blockly.Msg.ESP_restart="Restart ESP8266/ESP32";

//Wifi Server
Blockly.Msg.WifiServer_wait="Wait connections of clients"
Blockly.Msg.WifiServer_port="Wifi server begin in port"
Blockly.Msg.WifiServer_ESP8266webserver_port="Wifi AsynWebServer begin in port"
Blockly.Msg.WifiServer_answer="Wifi server answer:"
Blockly.Msg.WifiServer_stop="Stop the connected client to the our server"
Blockly.Msg.WifiServer_flush="Flush the connected client to the our server"
Blockly.Msg.WifiServer_ip="IP of the connected customer"
Blockly.Msg.WifiServer_request="Request of the connected customer"
Blockly.Msg.WifiServer_ESP8266webserver_parameter="AsynWebServer Read the parameter: "
Blockly.Msg.WifiServer_ESP8266webserver_parameter2="AsynWebServer Parameter: "
Blockly.Msg.WifiServer_esp8266_send_html_URL = "When a client with this URL (empty for root):";
Blockly.Msg.WifiServer_esp8266_send_html_HTML_page="is connected then show this HTML page: ";
Blockly.Msg.WifiServer_esp8266_send_html_execute="(optional) and do: ";
Blockly.Msg.WifiServer_esp8266_manage_requets="Manage client request";
Blockly.Msg.WifiServer_esp8266_send_text="is connected then show this text: ";
Blockly.Msg.WifiServer_ESP8266webserver_OTA="OTA is enabled";

Blockly.Msg.Wifi_ap_fixip="Access point mode.Static IP"
Blockly.Msg.Wifi_sta_fixip="Station mode.Static IP"
Blockly.Msg.Wifi_ip="IP"
Blockly.Msg.Wifi_Mask="Mask"
Blockly.Msg.Wifi_Gateway="Gateway"

//Text with more functions

Blockly.Msg.TEXT_APPEND_APPENDTEXT = "append text";
Blockly.Msg.TEXT_APPEND_HELPURL = "https://github.com/google/blockly/wiki/Text#text-modification";
Blockly.Msg.TEXT_APPEND_TO = "to";
Blockly.Msg.TEXT_APPEND_TOOLTIP = "Append some text to variable '%1'.";
Blockly.Msg.TEXT_CHANGECASE_HELPURL = "https://github.com/google/blockly/wiki/Text#adjusting-text-case";
Blockly.Msg.TEXT_CHANGECASE_OPERATOR_LOWERCASE = "to lower case";
Blockly.Msg.TEXT_CHANGECASE_OPERATOR_TITLECASE = "to Title Case";
Blockly.Msg.TEXT_CHANGECASE_OPERATOR_UPPERCASE = "to UPPER CASE";
Blockly.Msg.TEXT_CHANGECASE_TOOLTIP = "Return a copy of the text in a different case.";
Blockly.Msg.TEXT_CHARAT_FIRST = "get first letter";
Blockly.Msg.TEXT_CHARAT_FROM_END = "get letter # from end";
Blockly.Msg.TEXT_CHARAT_FROM_START = "get letter #";
Blockly.Msg.TEXT_CHARAT_HELPURL = "https://github.com/google/blockly/wiki/Text#extracting-text";
Blockly.Msg.TEXT_CHARAT_INPUT_INTEXT = "in text";
Blockly.Msg.TEXT_CHARAT_LAST = "get last letter";
Blockly.Msg.TEXT_CHARAT_RANDOM = "get random letter";
Blockly.Msg.TEXT_CHARAT_TAIL = "";
Blockly.Msg.TEXT_CHARAT_TOOLTIP = "Returns the letter at the specified position.";
Blockly.Msg.TEXT_CREATE_JOIN_ITEM_TOOLTIP = "Add an item to the text.";
Blockly.Msg.TEXT_CREATE_JOIN_TITLE_JOIN = "join";
Blockly.Msg.TEXT_CREATE_JOIN_TOOLTIP = "Add, remove, or reorder sections to reconfigure this text block.";
Blockly.Msg.TEXT_GET_SUBSTRING_END_FROM_END = "to letter # from end";
Blockly.Msg.TEXT_GET_SUBSTRING_END_FROM_START = "to letter #";
Blockly.Msg.TEXT_GET_SUBSTRING_END_LAST = "to last letter";
Blockly.Msg.TEXT_GET_SUBSTRING_HELPURL = "https://github.com/google/blockly/wiki/Text#extracting-a-region-of-text";
Blockly.Msg.TEXT_GET_SUBSTRING_INPUT_IN_TEXT = "in text";
Blockly.Msg.TEXT_GET_SUBSTRING_START_FIRST = "get substring from the first letter";
Blockly.Msg.TEXT_GET_SUBSTRING_START_FROM_END = "get substring from letter # from end";
Blockly.Msg.TEXT_GET_SUBSTRING_START_FROM_START = "get substring from letter #";
Blockly.Msg.TEXT_GET_SUBSTRING_TAIL = "";
Blockly.Msg.TEXT_GET_SUBSTRING_TOOLTIP = "Returns a specified portion of the text.";
Blockly.Msg.TEXT_INDEXOF_HELPURL = "https://github.com/google/blockly/wiki/Text#finding-text";
Blockly.Msg.TEXT_INDEXOF_INPUT_INTEXT = "in text";
Blockly.Msg.TEXT_INDEXOF_OPERATOR_FIRST = "find first occurrence of text";
Blockly.Msg.TEXT_INDEXOF_OPERATOR_LAST = "find last occurrence of text";
Blockly.Msg.TEXT_INDEXOF_TAIL = "";
Blockly.Msg.TEXT_INDEXOF_TOOLTIP = "Returns the index of the first/last occurrence of the first text in the second text. Returns %1 if text is not found.";
Blockly.Msg.TEXT_ISEMPTY_HELPURL = "https://github.com/google/blockly/wiki/Text#checking-for-empty-text";
Blockly.Msg.TEXT_ISEMPTY_TITLE = "%1 is empty";
Blockly.Msg.TEXT_ISEMPTY_TOOLTIP = "Returns true if the provided text is empty.";
Blockly.Msg.TEXT_JOIN_HELPURL = "https://github.com/google/blockly/wiki/Text#text-creation";
Blockly.Msg.TEXT_JOIN_TITLE_CREATEWITH = "create text with";
Blockly.Msg.TEXT_JOIN_TOOLTIP = "Create a piece of text by joining together any number of items.";
Blockly.Msg.TEXT_LENGTH_HELPURL = "https://github.com/google/blockly/wiki/Text#text-modification";
Blockly.Msg.TEXT_LENGTH_TITLE = "length of %1";
Blockly.Msg.TEXT_LENGTH_TOOLTIP = "Returns the number of letters (including spaces) in the provided text.";
Blockly.Msg.TEXT_PRINT_HELPURL = "https://github.com/google/blockly/wiki/Text#printing-text";
Blockly.Msg.TEXT_PRINT_TITLE = "print %1";
Blockly.Msg.TEXT_PRINT_TOOLTIP = "Print the specified text, number or other value.";
Blockly.Msg.TEXT_PROMPT_HELPURL = "https://github.com/google/blockly/wiki/Text#getting-input-from-the-user";
Blockly.Msg.TEXT_PROMPT_TOOLTIP_NUMBER = "Prompt for user for a number.";
Blockly.Msg.TEXT_PROMPT_TOOLTIP_TEXT = "Prompt for user for some text.";
Blockly.Msg.TEXT_PROMPT_TYPE_NUMBER = "prompt for number with message";
Blockly.Msg.TEXT_PROMPT_TYPE_TEXT = "prompt for text with message";
Blockly.Msg.TEXT_TEXT_HELPURL = "https://en.wikipedia.org/wiki/String_(computer_science)";
Blockly.Msg.TEXT_TEXT_TOOLTIP = "A letter, word, or line of text.";
Blockly.Msg.TEXT_TRIM_HELPURL = "https://github.com/google/blockly/wiki/Text#trimming-removing-spaces";
Blockly.Msg.TEXT_TRIM = "trim spaces from ";
Blockly.Msg.TEXT_TRIM_TOOLTIP = "Return a copy of the text with spaces removed from one or both ends.";

//Conversions
Blockly.Msg.CONV_tochar="Casting to char ";
Blockly.Msg.CONV_toString="Convert to String ";
Blockly.Msg.CONV_decimal="Number of decimals";
Blockly.Msg.CONV_tobyte="Casting to Byte ";
Blockly.Msg.CONV_toint="Casting to Int ";
Blockly.Msg.CONV_tounsigendint="Casting to unsigned Int ";
Blockly.Msg.CONV_tofloat="Casting to Float ";

//Encoder
Blockly.Msg.RotaryEncoderInit="Init Rotary Encoder";
Blockly.Msg.RotaryEncoderNumber="Rotary Encoder";
Blockly.Msg.RE_withoutInterrupt="without interrupts";
Blockly.Msg.RE_PINDT="Pin DT";
Blockly.Msg.RE_PINCLK="Pin CLK";
Blockly.Msg.RE_READ="Read Value";
Blockly.Msg.RE_WRITE="Write Value";
Blockly.Msg.RE_Button="Button";
Blockly.Msg.RE_Pressed="pressed?";

//ESP-NOW
Blockly.Msg.ESPNOW_init = "Init the protocol. Node";
Blockly.Msg.ESPNOW_msg_received = "When a message is received";
Blockly.Msg.ESPNOW_send_all = "Send the message to all nodes.";
Blockly.Msg.ESPNOW_send_mac = "Send the message to the mac: ";
Blockly.Msg.ESPNOW_fill_int = "Fill the Int param of the struct to:";
Blockly.Msg.ESPNOW_fill_float = "Fill the Float param of the struct to:";
Blockly.Msg.ESPNOW_fill_text = "Fill the Text param of the struct to:";
Blockly.Msg.ESPNOW_read_node = "Id node received";
Blockly.Msg.ESPNOW_read_param_int = "Param Int received";
Blockly.Msg.ESPNOW_read_param_float = "Param Float received";
Blockly.Msg.ESPNOW_read_param_text = "Param Text received";

//ALEXA
Blockly.Msg.Alexa_init = "Alexa.Device number:";
Blockly.Msg.Alexa_init2 = "Name:";
Blockly.Msg.Alexa_cb = "When a Alexa message is received from device:";
Blockly.Msg.Alexa_Loop = "Manage the Alexa connection.Loop";
Blockly.Msg.Alexa_Param = "Get parameter";
